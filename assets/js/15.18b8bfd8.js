(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{467:function(e,t,a){"use strict";a.r(t);var s=a(8),i=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Year: 2021\nMem : HBM & PCM")]),e._v(" "),t("ul",[t("li",[e._v("migration friendly")]),e._v(" "),t("li",[e._v("migration unfriendly")])]),e._v(" "),t("p",[t("strong",[e._v('Based on previous research "On-the-fly Page Migration and Address Reconciliation for Heterogeneous Memory Systems" from the same author.')])]),e._v(" "),t("ol",[t("li",[e._v("Adaptive migration polices\nOur technique increases or reduces the hotness thresholds to reduce or increase the number of pages migrated based on either the number of pages migrated over a window of observation or based on the observed benefits of page migrations (were pages accessed after the migration to faster memories).")]),e._v(" "),t("li",[e._v("AR overheads can defeat the benefits of page migration\nTo eliminate AR, we explore the benefit of reverse migrating pages to their original locations, particularly when the migrated\npages are no longer heavily accessed.\nAR: OS tables (translation look-aside buffers (TLBs), page tables) must also be updated since physical addresses (PAs) in such memory systems are based on the physical location of pages and a migration changes PAs: we call this process of changing PAs and updating system tables address reconciliation (AR).")])]),e._v(" "),t("p",[e._v("We discovered that an exponential-shaped histogram indicates that very few pages receive most accesses and that those applications benefit by either placing those few pages in the faster (HBM) memory at the start of execution, or migrated to HBM on demand.")]),e._v(" "),t("p",[e._v("Mcf 3% of all pages cause 97% of memory accesses.\nMilc 65% of pages contribute to 82% of all accesses.")]),e._v(" "),t("p",[e._v("If most of all pages receive about the same number of accesses, implying that too many pages may be migrated if a fixed hotness threshold is used for migrating\npages, and the migration overheads outweigh performance gains. "),t("strong",[e._v("Doubt about this statement.")])]),e._v(" "),t("p",[e._v("Migration of pages to faster memories results in performance gains if those pages continue to be heavily used, because these accesses will be satisfied by faster memories.")]),e._v(" "),t("p",[e._v("Linux3 performs the following functions when the virtual to PA mapping of a page is changed.")]),e._v(" "),t("ol",[t("li",[e._v("flush_cache_page")]),e._v(" "),t("li",[e._v("change PTE")]),e._v(" "),t("li",[e._v("flush_tlb_page")])]),e._v(" "),t("h4",{attrs:{id:"key-insights"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#key-insights"}},[e._v("#")]),e._v(" Key Insights")]),e._v(" "),t("p",[e._v("Adaptive migration polices: Previous page migration techniques relied on fixed hotness thresholds: a page is migrated from slow memories to faster memories when the number of times that page was accessed exceeds the hotness threshold. In contrast, we control page migration policies based on applicationsâ€™ memory access behaviors. Our technique increases or reduces the hotness thresholds to reduce or increase the number of pages migrated based on either the number of pages migrated over a window of observation or based on the observed benefits of page migrations (were pages accessed after the migration to faster memories).")]),e._v(" "),t("p",[e._v("AR overheads can defeat the benefits of page migration: To eliminate AR, we explore the benefit of reverse migrating pages to their original locations, particularly when the migrated pages are no longer heavily accessed. Reverse migration makes page migration invisible to the OS. However, reverse migrations can result in excessive data movement between slow and fast memories. In this work, we evaluate the effectiveness of the reverse migration technique.")]),e._v(" "),t("h4",{attrs:{id:"algorithm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#algorithm"}},[e._v("#")]),e._v(" Algorithm")]),e._v(" "),t("p",[e._v("If the count is high (too many pages have been migrated), we double the hotness threshold to reduce future migrations; likewise, if too few pages have been migrated in a twindow, we halve the hotness threshold to increase future Adaptive Migration Based on Number of Pages Migrated migrations. In our experiments, we used 4 million cycles as our twindow.6 We also limit the hotness threshold variations between 64 and 256.")]),e._v(" "),t("p",[e._v("We define the MBQ as "),t("strong",[e._v("the average number of accesses to pages that were recently migrated to HBM")]),e._v(".")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/hitqshao/qishao-notes/assets/23403286/bba89d31-32bc-440e-ad52-c1bcad71fa12",alt:"image"}})]),e._v(" "),t("ul",[t("li",[e._v("threshold adaption\nWe increase the threshold if more than 240 pages have been migrated in a window and reduce the threshold if fewer than 160 pages have been migrated in a window.")]),e._v(" "),t("li",[e._v("pause and resume migration\nIf the MBQ is less than a threshold (min_MBQ), then migrations are halted.\nmigrations are resumed if the MBQ is greater than another threshold (max_MBQ).")])]),e._v(" "),t("p",[e._v("Adaptive Migration Based on the MBQ\n"),t("img",{attrs:{src:"https://github.com/hitqshao/qishao-notes/assets/23403286/7c5876c6-f4cc-428b-b153-4fe11fe85739",alt:"image"}})]),e._v(" "),t("h5",{attrs:{id:"summary"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#summary"}},[e._v("#")]),e._v(" Summary")]),e._v(" "),t("p",[e._v("Two Algorithm")]),e._v(" "),t("ol",[t("li",[e._v("Based on number of page migrated, if too many page is migrared, reduce migration by increase threshold.")]),e._v(" "),t("li",[e._v("Based on reference after migration, if too less after migration, reduce or stop.")])])])}),[],!1,null,null,null);t.default=i.exports}}]);
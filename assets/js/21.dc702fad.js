(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{477:function(e,t,a){"use strict";a.r(t);var s=a(8),i=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("ol",[t("li",[e._v("Attach´e: Towards Ideal Memory Compression by Mitigating Metadata Bandwidth Overheads [MICRO 2018]")]),e._v(" "),t("li",[e._v("CRAM Enabling Transparent Memory-Compression for Commodity Memory Systems [HPCA 2019]")]),e._v(" "),t("li",[e._v("MBZip: Multiblock Data Compression [TACO 2017]")]),e._v(" "),t("li",[e._v("Compresso: Pragmatic Main Memory Compression [MICRO]")])]),e._v(" "),t("hr"),e._v(" "),t("h3",{attrs:{id:"_1-attach-e-towards-ideal-memory-compression-by-mitigating-metadata-bandwidth-overheads-micro"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-attach-e-towards-ideal-memory-compression-by-mitigating-metadata-bandwidth-overheads-micro"}},[e._v("#")]),e._v(" 1. Attach´e: Towards Ideal Memory Compression by Mitigating Metadata Bandwidth Overheads [MICRO]")]),e._v(" "),t("p",[e._v("Year: 2018")]),e._v(" "),t("p",[t("strong",[e._v("Attach´e does not use the free space made available by compression.")])]),e._v(" "),t("p",[t("strong",[e._v("Compression Predictor (COPR), predicts if the memory block is compressed.")]),e._v(" "),t("img",{attrs:{src:"https://github.com/hitqshao/qishao-notes/assets/23403286/5fdac0b6-1921-4b9f-bbf5-2c86549e74e5",alt:"image"}})]),e._v(" "),t("p",[t("strong",[e._v("Global Indication(GI)")]),e._v(": GI is composed of eight two-bit saturating counters, each of which keeps track of the compressibility of 18th the memory space.\nGI can be used as an accurate indicator for predicting the compressibility within a memory space if there is abundant similarity in compressibility.")]),e._v(" "),t("p",[t("strong",[e._v("Page-Level Predictor (PaPR)")]),e._v(": By exploiting the similarity in the compressibility of cachelines within an OS page [12], [18], [37], PaPR provides compression predictions at the page granularity.")]),e._v(" "),t("p",[t("strong",[e._v("Line-Level Predictor (LiPR)")]),e._v(":  LiPR is a set-associative cache structure indexed by the page number. LiPR uses the two-bit values of PaPR to determine if the neighboring cachelines have the same compressibility.")]),e._v(" "),t("h3",{attrs:{id:"_2-cram-enabling-transparent-memory-compression-for-commodity-memory-systems-hpca"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-cram-enabling-transparent-memory-compression-for-commodity-memory-systems-hpca"}},[e._v("#")]),e._v(" 2. CRAM Enabling Transparent Memory-Compression for Commodity Memory Systems [HPCA]")]),e._v(" "),t("p",[e._v("Year: 2019")]),e._v(" "),t("p",[t("strong",[e._v("Transparent Memory-Compression (TMC) can provide bandwidth benefits of memory compression in an OS-transparent manner by trying to exploit only the increased bandwidth and not the extra capacity.")])]),e._v(" "),t("p",[t("strong",[e._v("Line Location Predictor (LLP)")]),e._v(" that can determine the location of the line with 98% accuracy and a dynamic solution that disables compression if the benefits of compression are smaller than the overheads.")]),e._v(" "),t("p",[t("strong",[e._v("If we use HBM, we dont need to care too much about the bandwidth and metadata.")])]),e._v(" "),t("p",[e._v("We propose a history-based Line Location Predictor (LLP), that can identify the correct location of the line with a high accuracy (98%). The LLP is based on the observation that lines within a page tend to have similar compressibility.")]),e._v(" "),t("p",[e._v("LLP contains the Last Compressibility Table (LCT), that tracks the last compression status seen for a given index. The LCT is indexed with the hash of the page address.\nSo, for a given access, the index corresponding to the page address is used to predict the compressibility, then line location.")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/hitqshao/qishao-notes/assets/23403286/4c1c1b42-c4e0-4250-8be7-af0cb8edaa03",alt:"image"}})]),e._v(" "),t("p",[e._v("Even though the LLP is quite small, it provides an accuracy of 98%, much higher than the hit-rate of the metadata cache.")]),e._v(" "),t("p",[e._v("LCP stores metadata inline with block.")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/hitqshao/qishao-notes/assets/23403286/cdccf9e7-f9b5-48b0-9c10-977047f060b3",alt:"image"}})]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/hitqshao/qishao-notes/assets/23403286/54517fe5-abf0-44cb-ac6b-4759942be1df",alt:"image"}})]),e._v(" "),t("h3",{attrs:{id:"_3-mbzip-multiblock-data-compression-taco"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-mbzip-multiblock-data-compression-taco"}},[e._v("#")]),e._v(" 3. MBZip: Multiblock Data Compression [TACO]")]),e._v(" "),t("p",[e._v("A write to a location in memory may not change the existing data in that location and is thus a redundant write. Such write requests to cache have been termed as silent stores [25]/writes [21].")]),e._v(" "),t("p",[t("strong",[e._v("We find that, on average, across 21 benchmarks, 9.6% of the writes are silent. More than 15% of the writes are silent in benchmarks such as bwaves, GemsFDTD, lbm, leslie3d, mcf, mesa, sjeng, soplex, vortex2, and zeusmp.")])]),e._v(" "),t("p",[e._v("In such a scenario, we essentially issue one read request (to read the existing data) and no write request. However, if the write request is not silent, we add the overhead of a read request to the existing write request.")]),e._v(" "),t("p",[e._v("We observe that there is a strong correlation to a write being silent or nonsilent both across writes made to the same address during the course of the program execution and across writes to consecutive addresses. To exploit this correlation, we propose using a 2b bimodal predictor (indexed using the page addresses) to predict whether a write request is silent. The accuracy of our predictor (4kB structure) is around 94.4%, on average.")]),e._v(" "),t("h3",{attrs:{id:"_4-compresso-pragmatic-main-memory-compression"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-compresso-pragmatic-main-memory-compression"}},[e._v("#")]),e._v(" 4. Compresso: Pragmatic Main Memory Compression")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/hitqshao/qishao-notes/assets/23403286/50a52444-7ec2-447f-b830-9ef060884785",alt:"image"}})]),e._v(" "),t("p",[e._v("We associate a 2-bit saturating counter with each entry in the metadata cache (Fig. 5b). The counter is incremented when any writeback to the associated page results in a cache line overflow and is decremented upon cache line underflows (i.e., new data being more compressible).")]),e._v(" "),t("p",[e._v("Another 3-bit global predictor changes state based on page overflows in the system. We speculatively increase a page’s size to the maximum (4KB)\nwhen the local as well as global predictors have the higher bit set.")]),e._v(" "),t("p",[e._v("Hence, a page is stored uncompressed if it receives multiple streaming cache line overflows during a phase when the overall system is experiencing page overflows")]),e._v(" "),t("h3",{attrs:{id:"_5-enabling-technologies-for-memory-compression-metadata-mapping-and-prediction"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-enabling-technologies-for-memory-compression-metadata-mapping-and-prediction"}},[e._v("#")]),e._v(" 5. Enabling Technologies for Memory Compression:Metadata, Mapping, and Prediction")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/hitqshao/qishao-notes/assets/23403286/ac9fa284-dbe5-4ce1-af70-bb4e23cc39fd",alt:"image"}})]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/hitqshao/qishao-notes/assets/23403286/d26a752b-c871-44a2-9c2c-cc51cdcf88ad",alt:"image"}})]),e._v(" "),t("p",[t("strong",[e._v("Metadata is coexist with data. Thus they have to predict, even read.")])]),e._v(" "),t("p",[e._v("Reads are problematic because the size of the block is encoded in the block itself. Therefore, the read has to either be performed in two phases (read the metadata from the 0th chip, then read data from the appropriate subset of chips) or the read has to conservatively read data from all 9 chips in parallel.")]),e._v(" "),t("p",[e._v("The first is PCbased, where the PC of the load instruction serves as the index into a predictor table. This assumes that a load tends to access the same type of data record, with relatively uniform compressibility.")]),e._v(" "),t("p",[e._v("The second is page-based, where the physical page number serves as the index into a predictor table. This assumes that the data records in a single page are of a similar type and have uniform compressibility.")]),e._v(" "),t("p",[e._v("On a look-up, the highest-valued saturating counter indicates the predicted size of the block. In case of a tie, we conservatively predict the larger block size.")]),e._v(" "),t("p",[e._v("They keep a counter for each block compression length, and try to keep counter for each block length. Then predict by voting, following majority wins low.")])])}),[],!1,null,null,null);t.default=i.exports}}]);
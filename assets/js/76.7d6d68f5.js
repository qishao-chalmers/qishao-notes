(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{529:function(t,e,i){"use strict";i.r(e);var a=i(8),s=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("ol",[e("li",[t._v("[20] Decoding CUDA Binary")])]),t._v(" "),e("hr"),t._v(" "),e("h2",{attrs:{id:"_1-20-decoding-cuda-binary"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-20-decoding-cuda-binary"}},[t._v("#")]),t._v(" 1. [20] Decoding CUDA Binary")]),t._v(" "),e("h3",{attrs:{id:"compiling-flow"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#compiling-flow"}},[t._v("#")]),t._v(" Compiling Flow")]),t._v(" "),e("p",[t._v("When every thread in the warp has reached a re-convergence command - either a .S modifier or a SYNC instruction,\ndepending on the architecture - it will wait until the thread warp reaches the instruction whose address is specified by the\nSSY instruction, and then return to running in lock-step.")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://github.com/user-attachments/assets/66319026-1b78-410c-a6c5-68d09375da76",alt:"image"}})]),t._v(" "),e("h3",{attrs:{id:"assemble-code"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#assemble-code"}},[t._v("#")]),t._v(" Assemble Code")]),t._v(" "),e("p",[t._v("64 bits or 128 bits\n"),e("img",{attrs:{src:"https://github.com/user-attachments/assets/86e4c66a-1b8f-4b18-8efd-bdb40638b80d",alt:"image"}})]),t._v(" "),e("h3",{attrs:{id:"load-store-instruction-and-control-flow-of-divergence"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#load-store-instruction-and-control-flow-of-divergence"}},[t._v("#")]),t._v(" Load/Store Instruction and Control Flow of Divergence")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://github.com/user-attachments/assets/6c3891a8-c1ee-4eef-9526-febbd597188a",alt:"image"}})]),t._v(" "),e("h3",{attrs:{id:"compile-time-scheduling"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#compile-time-scheduling"}},[t._v("#")]),t._v(" Compile-Time Scheduling")]),t._v(" "),e("p",[t._v("As of Compute Capability 3.0, "),e("em",[t._v("instruction scheduling is handled by the compiler")]),t._v(" rather than by the hardware.")]),t._v(" "),e("p",[t._v("On this architecture every 8−th instruction, rather than being a real instruction, is a set of scheduling codes inserted by the compiler.")]),t._v(" "),e("p",[t._v("These scheduling codes dictate the minimum number of cycles that the thread must wait between every two consecutive instructions in the following seven instructions in order to satisfy dependence constraints.")]),t._v(" "),e("p",[t._v("Starting with Compute Capability 5.0, NVIDIA moved even more control logic away from the hardware, saving power and space.")]),t._v(" "),e("p",[t._v("Thus instruction-level barrier has been added to the scheduling codes generated by the compiler.")]),t._v(" "),e("p",[t._v("The scheduling codes on Compute Capabilities 5.x and 6.x occur in place of every fourth instruction.")]),t._v(" "),e("p",[t._v("As of Compute Capability 7.0, "),e("strong",[t._v("they are embedded into each individual instruction")]),t._v(", rather than controlling larger blocks of instructions.")]),t._v(" "),e("h4",{attrs:{id:"instruction-with-operand"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#instruction-with-operand"}},[t._v("#")]),t._v(" Instruction with Operand")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://github.com/user-attachments/assets/c12c2fae-dd53-420a-96f8-e05615ef0035",alt:"image"}})]),t._v(" "),e("p",[t._v("Although instructions are of fixed length, NVIDIA’s instruction sets lack the relative simplicity of a RISC architecture.")]),t._v(" "),e("p",[t._v("It includes complicated instructions such as multiplication-and-addition, multi-function operation that performs trigonometric functions including sine and cosine, and so on.")]),t._v(" "),e("p",[t._v("Although we can make generalizations about which bits are used for which components of the instruction, there are few consistent rules across different instructions.")]),t._v(" "),e("p",[t._v("Check PSETP, it has 3 source operands.\n"),e("img",{attrs:{src:"https://github.com/user-attachments/assets/b38e7590-f494-45a8-a029-643a7cdf7941",alt:"image"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"https://github.com/user-attachments/assets/54cd8f74-c1bc-4496-b175-8214972bef0c",alt:"image"}})])])}),[],!1,null,null,null);e.default=s.exports}}]);
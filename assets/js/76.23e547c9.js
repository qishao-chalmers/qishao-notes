(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{527:function(s,a,e){"use strict";e.r(a);var n=e(9),t=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h3",{attrs:{id:"gpgpu-sim-memory-allocation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gpgpu-sim-memory-allocation"}},[s._v("#")]),s._v(" GPGPU-sim Memory Allocation")]),s._v(" "),a("h4",{attrs:{id:"create-global-memory-pool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#create-global-memory-pool"}},[s._v("#")]),s._v(" Create global memory pool")]),s._v(" "),a("details",[a("summary",[s._v("Code")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// @@@@@@ ./src/abstract_hardware_model.cc\n\ngpgpu_t::gpgpu_t(const gpgpu_functional_sim_config &config, gpgpu_context *ctx)\n    : m_function_model_config(config) {\n  gpgpu_ctx = ctx;\n  ...\n  m_global_mem = new memory_space_impl<4096>("global",64*1024, config.gddr_size);\n  m_tex_mem = new memory_space_impl<4096>("tex",64*1024);\n  m_surf_mem = new memory_space_impl<4096>("surf",64*1024);\n}\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])])]),s._v(" "),a("h4",{attrs:{id:"implementation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#implementation"}},[s._v("#")]),s._v(" Implementation")]),s._v(" "),a("p",[s._v('In gpu instantiation, the code "memory_space_impl<4096>("global",64*1024,)"')]),s._v(" "),a("p",[s._v('4096 is page set, the variable "m_log2_block_size" will be 12 in this case.')]),s._v(" "),a("p",[s._v("It will further used to create pageIndex, when read or write operation operates on memory.")]),s._v(" "),a("ul",[a("li",[s._v("create page index")]),s._v(" "),a("li",[s._v("read/write memory_storage with offset")])]),s._v(" "),a("details",[a("summary",[s._v("Code")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// @@@@@@ src/cuda-sim/memory.h\n\n  // Key will be virtual page address, and mem_storage is corresponding page data\n  typedef mem_map<mem_addr_t, mem_storage<BSIZE> > map_t;\n  map_t m_data;\n\n// @@@@@@ src/cuda-sim/memory.cc\n// write operation\n\ntemplate <unsigned BSIZE>\nvoid memory_space_impl<BSIZE>::write(mem_addr_t addr, size_t length,\n                                     const void *data,\n                                     class ptx_thread_info *thd,\n                                     const ptx_instruction *pI) {\n  mem_addr_t index = addr >> m_log2_block_size;\n\n  if ((addr + length) <= (index + 1) * BSIZE) {\n    // fast route for intra-block access\n    unsigned offset = addr & (BSIZE - 1);\n    unsigned nbytes = length;\n    m_data[index].write(offset, nbytes, (const unsigned char *)data);\n  }\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])])]),s._v(" "),a("h4",{attrs:{id:"when-will-this-data-be-write-or-read"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#when-will-this-data-be-write-or-read"}},[s._v("#")]),s._v(" When will this data be write or read?")]),s._v(" "),a("p",[s._v("It is implemented in instruction exectuion.")]),s._v(" "),a("p",[s._v("After decode address space, when instruction is finally exectued, it read from/write into memory.")]),s._v(" "),a("details",[a("summary",[s._v("Code")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// @@@@@@ src/cuda-sim/instruction.cc\n\n// read operation\nvoid ld_exec(const ptx_instruction *pI, ptx_thread_info *thread) {\n  ...\n  memory_space *mem = NULL;\n  decode_space(space, thread, src1, mem, addr);\n  ...\n  mem->read(addr, size / 8, &data.s64);\n}\n\n// store operation\nvoid st_impl(const ptx_instruction *pI, ptx_thread_info *thread) {\n  ...\n  memory_space *mem = NULL;\n  mem->write(addr, size / 8, &ptx_regs[0].s64, thread, pI);\n  ...\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])])])])}),[],!1,null,null,null);a.default=t.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{476:function(s,e,t){"use strict";t.r(e);var a=t(8),n=Object(a.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h3",{attrs:{id:"chap5-llvm-intermediate-representation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#chap5-llvm-intermediate-representation"}},[s._v("#")]),s._v(" Chap5. LLVM Intermediate Representation")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://github.com/hitqshao/qishao-notes/assets/23403286/b944e10d-cec5-4392-b7bf-f1178b3f37c0",alt:"image"}})]),s._v(" "),e("h4",{attrs:{id:"_1-this-ir-has-three-equivalent-forms"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-this-ir-has-three-equivalent-forms"}},[s._v("#")]),s._v(" 1.  This IR has three equivalent forms:"),e("br")]),s._v(" "),e("p",[s._v("• An in-memory representation (the Instruction class, among others)"),e("br"),s._v("\n• An on-disk representation that is encoded in a space-efficient form  (the bitcode files)"),e("br"),s._v("\n• An on-disk representation in a human-readable text form (the LLVM assembly files)"),e("br")]),s._v(" "),e("h4",{attrs:{id:"_2-llvm-still-conveys-some-target-specific-aspects"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-llvm-still-conveys-some-target-specific-aspects"}},[s._v("#")]),s._v(" 2. LLVM still conveys some target-specific aspects"),e("br")]),s._v(" "),e("p",[s._v("Program might implicitly include target-specific headers, like "),e("strong",[s._v("bits")]),s._v(" linux header folder.")]),s._v(" "),e("h4",{attrs:{id:"_3-commands"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-commands"}},[s._v("#")]),s._v(" 3. commands"),e("br")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("clang *.c -emit-llvm -c -o *.bc\nclang *.c -emit-llvm -S -c -o *.ll\nllvm-as *.ll -o *.bc\nllvm-dis *.bc -o *.ll\n\n//extract function from IR module\nllvm-extract -func=* *.bc -o *.bc\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("h4",{attrs:{id:"_4-llvm-ir-language-syntax"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-llvm-ir-language-syntax"}},[s._v("#")]),s._v(" 4. LLVM IR Language Syntax"),e("br")]),s._v(" "),e("p",[s._v("module -> function -> block -> instruction\n• SSA(Static Single Assignment) Form\n• Thress Address Instruction\n• Infinite number of registers")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"\n\n// type:<size>:<abi>:<preferred>\n// pointer 64bit 64bit 64 bit\n// p:64:64:64\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h4",{attrs:{id:"_5-introducing-llvm-ir-in-memory-model"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-introducing-llvm-ir-in-memory-model"}},[s._v("#")]),s._v(" 5. Introducing llvm IR in-memory model"),e("br")]),s._v(" "),e("ul",[e("li",[s._v("Module"),e("br"),s._v(" "),e("ul",[e("li",[s._v("Module::iterator iterates across functions in the module"),e("br")]),s._v(" "),e("li",[s._v("begin(); end();"),e("br")])])]),s._v(" "),e("li",[s._v("Function"),e("br"),s._v(" "),e("ul",[e("li",[s._v("isDeclaration()"),e("br")]),s._v(" "),e("li",[s._v("getArgumentList() or arg_begin(), arg_end()"),e("br")]),s._v(" "),e("li",[s._v("Iterate through blocks: for (Function::iterator i = function.begin(), e = function.end(); i != e; ++i)"),e("br")])])]),s._v(" "),e("li",[s._v("BasicBlock"),e("br"),s._v(" "),e("ul",[e("li",[s._v("encapsulate all instructions")]),s._v(" "),e("li",[s._v("iterates thorugh begin() and end()")]),s._v(" "),e("li",[s._v("access predecessor or list through getSinglePredecessor")])])]),s._v(" "),e("li",[s._v("Instruction"),e("br"),s._v(" "),e("ul",[e("li",[s._v("Predicates: isAssociative(), isCommutative(), isIdempotent(), or isTerminator()")]),s._v(" "),e("li",[s._v("getOpCode()")]),s._v(" "),e("li",[s._v("access Operands() through op_begin() and op_end()"),e("br")])])]),s._v(" "),e("li",[e("strong",[s._v("Most powerful Value and User Interface")]),s._v(" "),e("ul",[e("li",[s._v("Function and Intruction are subclasses of both Value and User.")]),s._v(" "),e("li",[s._v("BasicBlock is a subclass of Value")]),s._v(" "),e("li",[s._v("Value and User and be navigate through use-def and def-use chain")]),s._v(" "),e("li",[s._v("Value defines a result can be used by others")]),s._v(" "),e("li",[s._v("User means that this entity use one or more Value Interface.")])])]),s._v(" "),e("li",[s._v("Value & User\n"),e("ul",[e("li",[s._v("Value defines use_begin() and use_end() to iterate through all Users "),e("strong",[s._v("def-use chain")])]),s._v(" "),e("li",[s._v("ReplaceAllUsesWith(Value *)")]),s._v(" "),e("li",[s._v("User defines op_begin() and op_end() access all of the Value Interface it uses "),e("strong",[s._v("use-def chain")])]),s._v(" "),e("li",[s._v("ReplaceUsesOfWith(Value *From, Value *To)")])])])]),s._v(" "),e("h4",{attrs:{id:"_6-compile-time-and-link-time-optimization"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-compile-time-and-link-time-optimization"}},[s._v("#")]),s._v(" 6. Compile-time and Link time Optimization"),e("br")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("opt -O3 sum.bc -o sum-O3.bc\nopt -std-compile-opts sum.bc -o sum-stdc.bc\n\nllvm-link file1.bc file2.bc file3.bc -o=all.bc\nopt -std-link-opts all.bc -o all-stdl.bc\n\nopt sum.bc -mem2reg -instcount -o sum-tmp.bc -stats\nopt sum.bc -time-passes -domtree -instcount -o sum-tmp.bc\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("h4",{attrs:{id:"_7-discovering-which-passes-matter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-discovering-which-passes-matter"}},[s._v("#")]),s._v(" 7. Discovering which passes matter"),e("br")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("opt -O1 sum-O0.ll -S -o sum-O1.ll\n\nclang -Xclang -print-stats -emit-llvm -O1 sum.c -c -o sum-O1.bc\n\nopt sum-O0.ll -stats -mem2reg -o sum-O1.ll\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h4",{attrs:{id:"_8-pass-dependencies"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-pass-dependencies"}},[s._v("#")]),s._v(" 8. Pass Dependencies"),e("br")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// full list of passes used when you request just the mem2reg pass\nopt sum-O0.ll -debug-pass=Structure -mem2reg -S -o sum-O1.ll\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h4",{attrs:{id:"_9-pass-api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-pass-api"}},[s._v("#")]),s._v(" 9. Pass API"),e("br")]),s._v(" "),e("ul",[e("li",[s._v("ModulePass runOnModule()")]),s._v(" "),e("li",[s._v("FunctionPass runOnFuction()")]),s._v(" "),e("li",[s._v("BasicBlockPass runOnBasicBlock()")])]),s._v(" "),e("p",[s._v("If Unchanged, return false. Or else, return true.\n10.")])])}),[],!1,null,null,null);e.default=n.exports}}]);
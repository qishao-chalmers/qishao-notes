(window.webpackJsonp=window.webpackJsonp||[]).push([[137],{594:function(a,s,n){"use strict";n.r(s);var t=n(9),e=Object(t.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"cuda-layernorm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cuda-layernorm"}},[a._v("#")]),a._v(" CUDA LayerNorm")]),a._v(" "),s("p",[s("a",{attrs:{href:"https://oneflow2020.medium.com/how-to-implement-an-efficient-layernorm-cuda-kernel-oneflow-performance-optimization-731e91a285b8",target:"_blank",rel:"noopener noreferrer"}},[a._v("Figure Source"),s("OutboundLink")],1)]),a._v(" "),s("p",[a._v("Formula\n"),s("img",{attrs:{src:"https://github.com/user-attachments/assets/b6e1011f-d52f-41e4-a5fb-9e27429a3671",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"keynotes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#keynotes"}},[a._v("#")]),a._v(" Keynotes:")]),a._v(" "),s("ul",[s("li",[a._v("online algorthim to reduce pass")]),a._v(" "),s("li",[a._v("warp shuffle for warp-level synchronization")]),a._v(" "),s("li",[a._v("shared memory cache input vector in first pass, which could be reused in the future")]),a._v(" "),s("li",[a._v("float4 for global memory coalesce")])]),a._v(" "),s("p",[a._v("The performance improvement from last two optimization is obvious in this algorithm.")]),a._v(" "),s("h2",{attrs:{id:"basic-flow"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#basic-flow"}},[a._v("#")]),a._v(" Basic Flow")]),a._v(" "),s("p",[a._v("normally it needs two pass:")]),a._v(" "),s("ul",[s("li",[a._v("collect mean")]),a._v(" "),s("li",[a._v("calculate variance")])]),a._v(" "),s("p",[a._v("After those two passes, we obtain mean and variance.\nThe last extra pass, we calculate elementwise normalization.")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("        for (int i = 0; i < C; ++i) {\n            mean += x[i];\n        }\n        mean /= C;\n\n        float var = 0.f;\n        for (int i = 0; i < C; ++i) {\n            float xShift = x[i] - mean;\n            var += xShift * xShift;\n        }\n        float inv_std = 1.0f / sqrt(var / C + eps);\n\n        for (int i = 0; i < C; ++i) {\n            y[i] = weight[i] * (x[i] - mean) * inv_std + bias[i];\n        }\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br")])]),s("h2",{attrs:{id:"naive-algorithm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#naive-algorithm"}},[a._v("#")]),a._v(" Naive algorithm")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://github.com/user-attachments/assets/8ad186d7-bc9f-4b08-8333-0a5cc649e41f",alt:"image"}})]),a._v(" "),s("p",[a._v("This naive algorithm reduce first two pass into single pass."),s("br"),a._v("\nIn one pass, it calculates mean and variance.")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("            float *const x = input + row * C;\n            float *const y = output + row * C;\n            float partialSum = 0.0f;\n            float partialSum2 = 0.0f;\n            for (int i = laneId; i < C; i += warpSize) {\n                float xi = x[i];\n                partialSum += xi;\n                partialSum2 += xi * xi;\n            }\n\n            float mean = warpReduceSum(partialSum) / C;\n            float mean2 = warpReduceSum(partialSum2) / C;\n\n            float var = (mean2 - mean * mean);\n            float inv_std = rsqrtf(var + eps);\n\n            for (int i = laneId; i < C; i += warpSize) {\n                y[i] = weight[i] * (x[i] - mean) * inv_std + bias[i];\n            }\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br")])]),s("h2",{attrs:{id:"welford-online-algorthim"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#welford-online-algorthim"}},[a._v("#")]),a._v(" Welford' online algorthim")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://github.com/user-attachments/assets/cb3e0b0b-d69b-4c52-9d38-28482b045b9d",alt:"image"}})]),a._v(" "),s("p",[a._v("This is also single-pass algorithm and numerically stable.")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("            for (int i = laneId; i < C; i += warpSize) {\n                float xi = x[i];\n                n++;\n                float delta = xi - mean;\n                mean += delta / n;\n                float delta2 = xi - mean;\n                M2 += delta * delta2;\n            }\n\n            welfordWarpReduce(mean,M2,n,&shared[warpId*2],&shared[warpId*2+1]);\n\n            float global_mean = shared[warpId*2];\n            float global_var = shared[warpId*2+1];\n          \n            float inv_std = rsqrtf(global_var + eps);\n\n            for (int i = laneId; i < C; i += warpSize) {\n                y[i] = weight[i] * (x[i] - global_mean) * inv_std + bias[i];\n            }\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br")])]),s("h1",{attrs:{id:"activation-function"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#activation-function"}},[a._v("#")]),a._v(" Activation Function")]),a._v(" "),s("p",[a._v("Activation function is also implemented. This is elemenment-wise operation.")]),a._v(" "),s("p",[a._v("There is no too much room to improve performance. The ratio of compute/memory is too low.")])])}),[],!1,null,null,null);s.default=e.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{506:function(s,e,n){"use strict";n.r(e);var a=n(8),t=Object(a.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h3",{attrs:{id:"gpgpu-sim-memory-interface"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gpgpu-sim-memory-interface"}},[s._v("#")]),s._v(" GPGPU-sim Memory Interface")]),s._v(" "),e("h4",{attrs:{id:"response-phase-from-interconnect-to-sm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#response-phase-from-interconnect-to-sm"}},[s._v("#")]),s._v(" Response Phase from Interconnect to SM")]),s._v(" "),e("p",[s._v("simt_core_cluster is at GPU level, it can fetch response into m_response_fifo.")]),s._v(" "),e("p",[e("strong",[s._v("icnt_pop")]),s._v(", if return non null ptr, it is a memory fetch repsonse, push it into m_response_fifo.")]),s._v(" "),e("details",[e("summary",[s._v("Code")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// @@@@@@ shader.cc\n\nvoid simt_core_cluster::icnt_cycle()\n{\n    // pop from upward queue (GMMU to CU) of cluster and push it to the one in core (SM/CU)\n    if ( !m_gmmu_cu_queue.empty() ) {\n      mem_fetch *mf = m_gmmu_cu_queue.front();\n      ...\n      m_core[cid]->accept_access_response(mf);\n    } \n    \n    // pop it from the downward queue (CU to GMMU) of the core (SM/CU) and push it to the one in cluster (TPC)\n    for (unsigned i=0; i < m_config->n_simt_cores_per_cluster; i++) {\n       if (!m_core[i]->empty_cu_gmmu_queue()){\n          mem_fetch *mf = m_core[i]->front_cu_gmmu_queue();\n          ...\n          m_cu_gmmu_queue.push_front(mf);\n       }\n    }\n\n    // Forward response from GPU response fifo into shader core (SM) response fifo\n    if( !m_response_fifo.empty() ) {\n        mem_fetch *mf = m_response_fifo.front();\n        unsigned cid = m_config->sid_to_cid(mf->get_sid());\n        ...\n            // data response\n            if( !m_core[cid]->ldst_unit_response_buffer_full() ) {\n                m_response_fifo.pop_front();\n                // GPU ---\x3e SM\n                m_core[cid]->accept_ldst_unit_response(mf);\n            }\n        }\n    }\n\n    // Accept Response from Interconnect Network\n    if( m_response_fifo.size() < m_config->n_simt_ejection_buffer_size ) {\n        mem_fetch *mf = (mem_fetch*) ::icnt_pop(m_cluster_id);\n        if (!mf) \n            return;\n\n        // The packet size varies depending on the type of request: \n        // - For read request and atomic request, the packet contains the data \n        // - For write-ack, the packet only has control metadata\n        ...\n        m_stats->m_incoming_traffic_stats->record_traffic(mf, packet_size); \n        mf->set_status(IN_CLUSTER_TO_SHADER_QUEUE,gpu_sim_cycle+gpu_tot_sim_cycle);\n        ...\n        // Interconnect to GPU\n        m_response_fifo.push_back(mf);\n        m_stats->n_mem_to_simt[m_cluster_id] += mf->get_num_flits(false);\n    } \n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br")])])]),s._v(" "),e("p",[s._v("The flow below is from SM to ldst unit and then to L1 cache.")]),s._v(" "),e("p",[s._v("The L1 cache is included in ldst unit.")]),s._v(" "),e("details",[e("summary",[s._v("Code")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\nvoid shader_core_ctx::accept_ldst_unit_response(mem_fetch * mf) \n{\n   m_ldst_unit->fill(mf);\n}\n\nvoid ldst_unit::fill( mem_fetch *mf )\n{\n    mf->set_status(IN_SHADER_LDST_RESPONSE_FIFO,gpu_sim_cycle+gpu_tot_sim_cycle);\n    m_response_fifo.push_back(mf);\n}\n\nvoid ldst_unit::cycle()\n{\n   writeback();\n   ...\n   if( !m_response_fifo.empty() ) {\n       mem_fetch *mf = m_response_fifo.front();\n       ...\n    \t   if( mf->get_type() == WRITE_ACK || ( m_config->gpgpu_perfect_mem && mf->get_is_write() )) {\n               m_core->store_ack(mf);\n               m_response_fifo.pop_front();\n\n               if ( m_gpu->get_global_memory()->is_page_managed(mf->get_mem_access().get_addr(), mf->get_mem_access().get_size()) ) {\n                    m_gpu->getGmmu()->reserve_pages_remove(mf->get_mem_access().get_addr(), mf->get_mem_access().get_uid());\n               }\n               ...\n           } else {\n              ...\n              if (m_L1D->fill_port_free()) {\n                   m_L1D->fill(mf,gpu_sim_cycle+gpu_tot_sim_cycle);\n                   m_response_fifo.pop_front();\n              }\n           }\n       }\n   }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br")])])]),s._v(" "),e("p",[s._v("At this time the response is fed into L1 Cache, which is shared in SM.")]),s._v(" "),e("p",[s._v("But how is it responsed to core?")]),s._v(" "),e("h4",{attrs:{id:"response-phase-from-l1-cache-to-wrap-execution"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#response-phase-from-l1-cache-to-wrap-execution"}},[s._v("#")]),s._v(" Response Phase From L1 Cache to Wrap execution")]),s._v(" "),e("details",[e("summary",[s._v("Code")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("/// @@@@@@ gpu-cache.cc\n/// Interface for response from lower memory level (model bandwidth restictions in caller)\nvoid baseline_cache::fill(mem_fetch *mf, unsigned time){\n    ...\n    if ( m_config.m_alloc_policy == ON_MISS )\n        m_tag_array->fill(e->second.m_cache_index,time);\n    else if ( m_config.m_alloc_policy == ON_FILL )\n        m_tag_array->fill(e->second.m_block_addr,time);\n\n    m_mshrs.mark_ready(e->second.m_block_addr, has_atomic);\n    ...\n}\n\n/// Accept a new cache fill response: mark entry ready for processing\nvoid mshr_table::mark_ready( new_addr_type block_addr, bool &has_atomic ){\n    ...\n    m_current_response.push_back( block_addr );\n    ...\n}\n\n/// Returns next ready access\nmem_fetch *mshr_table::next_access(){\n    ...\n    new_addr_type block_addr = m_current_response.front();\n    ...\n    mem_fetch *result = m_data[block_addr].m_list.front();\n    return result;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br")])])]),s._v(" "),e("p",[s._v("cache wrapped the next_access, when cache->next_access() is called, it will call mshr next_access().")]),s._v(" "),e("p",[s._v("writeback() function()")]),s._v(" "),e("ol",[e("li",[s._v("m_next_wb store next_writeback_function, it could be hit in cache or just get response from interconnect\\\n"),e("ul",[e("li",[s._v("scoreboard relase register")]),s._v(" "),e("li",[s._v("m_core->warp_inst_complete")])])]),s._v(" "),e("li",[s._v("update m_next_wb from MSHR in L1Cache")])]),s._v(" "),e("details",[e("summary",[s._v("Code")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("void ldst_unit::writeback()\n{\n    // process next instruction that is going to writeback\n    if( !m_next_wb.empty() ) {\n        if( m_operand_collector->writeback(m_next_wb) ) {\n            bool insn_completed = false; \n            for( unsigned r=0; r < 4; r++ ) {\n                if( m_next_wb.out[r] > 0 ) {\n\t\t    ...\n\t\t    else { // shared \n                        m_scoreboard->releaseRegister( m_next_wb.warp_id(), m_next_wb.out[r] );\n                        insn_completed = true; \n                    }\n                }\n            }\n            if( insn_completed ) {\n                m_core->warp_inst_complete(m_next_wb);\n            }\n            m_next_wb.clear();\n            m_last_inst_gpu_sim_cycle = gpu_sim_cycle;\n            m_last_inst_gpu_tot_sim_cycle = gpu_tot_sim_cycle;\n        }\n    }\n\n\n    for( unsigned c = 0; m_next_wb.empty() && (c < m_num_writeback_clients); c++ ) {\n        case 4: \n            if( m_L1D && m_L1D->access_ready() ) {\n                mem_fetch *mf = m_L1D->next_access();\n                m_next_wb = mf->get_inst();\n\n                if ( m_gpu->get_global_memory()->is_page_managed(mf->get_mem_access().get_addr(), mf->get_mem_access().get_size()) ) { \n                    m_gpu->getGmmu()->reserve_pages_remove(mf->get_mem_access().get_addr(), mf->get_mem_access().get_uid());\n                }\n\t\t \n                delete mf;\n                serviced_client = next_client; \n            }\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br")])])]),s._v(" "),e("p",[s._v("m_core->warp_inst_complete is simple:")]),s._v(" "),e("details",[e("summary",[s._v("Code")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("void shader_core_ctx::warp_inst_complete(const warp_inst_t &inst)\n{\n  ...\n  m_gpu->gpu_sim_insn += inst.active_count();\n  inst.completed(gpu_tot_sim_cycle + gpu_sim_cycle);\n  ...\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])])]),s._v(" "),e("h4",{attrs:{id:"how-is-memory-request-generated-from-warp-inst"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#how-is-memory-request-generated-from-warp-inst"}},[s._v("#")]),s._v(" How is memory request generated from warp inst?")]),s._v(" "),e("ol",[e("li",[s._v("warp_inst will generate memory access, for address of each thread in the warp, it will be push into access_q."),e("br"),s._v("\nWhen the warp is issued, it will call generate_mem_access to generate this m_access_q.")])]),s._v(" "),e("details",[e("summary",[s._v("Code")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// @@@@@@ abstract_hardware_mode.cc\nvoid warp_inst_t::generate_mem_accesses()\n{\n    if( cache_block_size ) {\n\t...\n        for( unsigned thread=0; thread < m_config->warp_size; thread++ ) {\n            new_addr_type addr = m_per_scalar_thread[thread].memreqaddr[0];\n            unsigned block_address = line_size_based_tag_func(addr,cache_block_size);\n            accesses[block_address].set(thread);\n        }\n        for( a=accesses.begin(); a != accesses.end(); ++a ) \n            m_accessq.push_back( mem_access_t(access_type,a->first,cache_block_size,is_write,a->second,byte_mask) );\n}\n\n// The above function is called by:\nvoid shader_core_ctx::func_exec_inst( warp_inst_t &inst )\n{\n    execute_warp_inst_t(inst);\n    if( inst.is_load() || inst.is_store() )\n        inst.generate_mem_accesses();\n}\n\nvoid shader_core_ctx::issue_warp( register_set& pipe_reg_set, const warp_inst_t* next_inst, const active_mask_t &active_mask, unsigned warp_id )\n{\n    warp_inst_t** pipe_reg = pipe_reg_set.get_free();\n    ...\n    m_warp[warp_id].ibuffer_free();\n    ...\n    **pipe_reg = *next_inst; // static instruction information\n    (*pipe_reg)->issue( active_mask, warp_id, gpu_tot_sim_cycle + gpu_sim_cycle, m_warp[warp_id].get_dynamic_warp_id() ); // dynamic instruction information\n    m_stats->shader_cycle_distro[2+(*pipe_reg)->active_count()]++;\n    func_exec_inst( **pipe_reg );\n    ...\n    updateSIMTStack(warp_id,*pipe_reg);\n    m_scoreboard->reserveRegisters(*pipe_reg);\n    m_warp[warp_id].set_next_pc(next_inst->pc + next_inst->isize);\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br")])])]),s._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("p",[s._v("ldst_unit::memory_cycle"),e("br"),s._v("\nIn this memory_cycle, it will invoke each access request inside inst."),e("br"),s._v("\nThe access will be converted into memory request, sending out downstream to L1 cache.")]),s._v(" "),e("p",[s._v("This means that if each thread access a different block in cache, "),e("strong",[s._v("step 1)")]),s._v(" will generate 32 request inside the m_access_q."),e("br"),s._v("\nThen memory_cycle will at least needs 32 cycle to allocate mem_fetch request for each req.")])])]),s._v(" "),e("details",[e("summary",[s._v("Code")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// shader.cc\nbool ldst_unit::memory_cycle( warp_inst_t &inst, mem_stage_stall_type &stall_reason, mem_stage_access_type &access_type )\n{\n   if ( !inst.accessq_empty() ) {\n       \tconst mem_access_t &access = inst.accessq_front();\n        if( bypassL1D ) {\n           // bypass L1 cache\n           unsigned control_size = inst.is_store() ? WRITE_PACKET_SIZE : READ_PACKET_SIZE;\n           unsigned size = access.get_size() + control_size;\n           if( m_icnt->full(size, inst.is_store() || inst.isatomic()) ) {\n               stall_cond = ICNT_RC_FAIL;\n           } else {\n               mem_fetch *mf = m_mf_allocator->alloc(inst,access);\n               m_icnt->push(mf);\n\n\t       inst.accessq_pop_front();\n               //inst.clear_active( access.get_warp_mask() );\n               if( inst.is_load() ) { \n                  for( unsigned r=0; r < 4; r++) \n                      if(inst.out[r] > 0) \n                          assert( m_pending_writes[inst.warp_id()][inst.out[r]] > 0 );\n               } else if( inst.is_store() ) \n                  m_core->inc_store_req( inst.warp_id() );\n           }\n       } else {\n           stall_cond = process_memory_access_queue(m_L1D,inst);\n       }\n   }\n}\n\nmem_stage_stall_type ldst_unit::process_memory_access_queue( cache_t *cache, warp_inst_t &inst )\n{\n    ...\n    mem_fetch *mf = m_mf_allocator->alloc(inst,inst.accessq_front());\n    enum cache_request_status status = cache->access(mf->get_addr(),mf,gpu_sim_cycle+gpu_tot_sim_cycle,events);\n    return process_cache_access( cache, mf->get_addr(), inst, events, mf, status );\n}\n\nmem_fetch *alloc( new_addr_type addr, mem_access_type type, unsigned size, bool wr ) const \n{\n    mem_access_t access( type, addr, size, wr );\n    mem_fetch *mf = new mem_fetch( access, \n    \t\t       NULL,\n    \t\t       wr?WRITE_PACKET_SIZE:READ_PACKET_SIZE, \n    \t\t       -1, \n    \t\t       m_core_id, \n    \t\t       m_cluster_id,\n    \t\t       m_memory_config );\n    \treturn mf;\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br")])])])])}),[],!1,null,null,null);e.default=t.exports}}]);
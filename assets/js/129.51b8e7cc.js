(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{584:function(t,e,r){"use strict";r.r(e);var o=r(9),a=Object(o.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"torch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#torch"}},[t._v("#")]),t._v(" torch")]),t._v(" "),e("p",[t._v("The torch module in PyTorch is the high-level Python interface that provides user-facing APIs."),e("br"),t._v("\nIt serves as the entry point for creating tensors, performing operations, defining neural networks, and managing other PyTorch features.\nThe torch source code primarily resides in the torch/ directory of the PyTorch source tree and acts as a bridge between Python and the backend components (e.g., C++ and CUDA).")]),t._v(" "),e("h2",{attrs:{id:"_1-structure-of-torch-source-code"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-structure-of-torch-source-code"}},[t._v("#")]),t._v(" 1. Structure of torch Source Code")]),t._v(" "),e("p",[t._v("The torch directory contains various submodules and files that implement PyTorch's core Python APIs\n"),e("img",{attrs:{src:"https://github.com/user-attachments/assets/39f94883-4651-4e4b-a629-6fdf311677f9",alt:"image"}})]),t._v(" "),e("h2",{attrs:{id:"_2-core-functions-of-torch-source-code"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-core-functions-of-torch-source-code"}},[t._v("#")]),t._v(" 2. Core Functions of torch Source Code")]),t._v(" "),e("h3",{attrs:{id:"a-tensor-api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#a-tensor-api"}},[t._v("#")]),t._v(" a. Tensor API")]),t._v(" "),e("p",[t._v("The torch.Tensor class is the central data structure in PyTorch."),e("br"),t._v("\nIt provides the foundation for numerical computations, supporting operations on both CPUs and GPUs.")]),t._v(" "),e("ul",[e("li",[t._v("Source Code: torch/tensor.py")]),t._v(" "),e("li",[t._v("Key Features:\n"),e("ul",[e("li",[t._v("Creation of tensors using methods like torch.tensor(), torch.zeros(), torch.ones().")]),t._v(" "),e("li",[t._v("Provides methods for tensor operations (e.g., add, mul, matmul).")]),t._v(" "),e("li",[t._v("Tensors are backed by the at::Tensor class in ATen.")])])])]),t._v(" "),e("h3",{attrs:{id:"b-functional-api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#b-functional-api"}},[t._v("#")]),t._v(" b. Functional API")]),t._v(" "),e("p",[t._v("The torch.functional module provides stateless APIs for mathematical operations.")]),t._v(" "),e("ul",[e("li",[t._v("Source Code: torch/functional.py")]),t._v(" "),e("li",[t._v("Examples:\n"),e("ul",[e("li",[t._v("Operations: torch.matmul, torch.sigmoid, torch.softmax.")]),t._v(" "),e("li",[t._v("Often complements tensor methods for advanced operations.")])])])]),t._v(" "),e("h3",{attrs:{id:"c-neural-networks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#c-neural-networks"}},[t._v("#")]),t._v(" c. Neural Networks")]),t._v(" "),e("p",[t._v("The torch.nn module is designed for building and training neural networks. It provides building blocks such as layers, loss functions, and the torch.nn.Module class.")]),t._v(" "),e("ul",[e("li",[t._v("Source Code: torch/nn/")]),t._v(" "),e("li",[t._v("Key Features:\n"),e("ul",[e("li",[t._v("Layers like nn.Linear, nn.Conv2d, and nn.ReLU.")]),t._v(" "),e("li",[t._v("Loss functions like nn.CrossEntropyLoss and nn.MSELoss.")])])])]),t._v(" "),e("h3",{attrs:{id:"d-autograd-automatic-differentiation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#d-autograd-automatic-differentiation"}},[t._v("#")]),t._v(" d. Autograd (Automatic Differentiation)")]),t._v(" "),e("p",[t._v("The torch.autograd module powers PyTorch's ability to compute gradients automatically.")]),t._v(" "),e("ul",[e("li",[t._v("Source Code: torch/autograd/")]),t._v(" "),e("li",[t._v("Key Features:\n"),e("ul",[e("li",[t._v("Tracks operations on tensors with requires_grad=True.")]),t._v(" "),e("li",[t._v("Builds a computation graph dynamically during runtime.")]),t._v(" "),e("li",[t._v("Gradients are computed via torch.autograd.backward.")])])])]),t._v(" "),e("h3",{attrs:{id:"e-optimization"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#e-optimization"}},[t._v("#")]),t._v(" e. Optimization")]),t._v(" "),e("p",[t._v("The torch.optim module provides implementations of optimization algorithms.")]),t._v(" "),e("ul",[e("li",[t._v("Source Code: torch/optim/")]),t._v(" "),e("li",[t._v("Examples:\n"),e("ul",[e("li",[t._v("Optimizers: torch.optim.SGD, torch.optim.Adam.")]),t._v(" "),e("li",[t._v("Manages model parameters and updates them based on gradients.")])])])]),t._v(" "),e("h3",{attrs:{id:"f-cuda-utilities"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#f-cuda-utilities"}},[t._v("#")]),t._v(" f. CUDA Utilities")]),t._v(" "),e("p",[t._v("The torch.cuda module provides utilities for GPU support.")]),t._v(" "),e("ul",[e("li",[t._v("Source Code: torch/cuda/")]),t._v(" "),e("li",[t._v("Key Features:\n"),e("ul",[e("li",[t._v("Memory management and synchronization.")]),t._v(" "),e("li",[t._v("Functions like torch.cuda.is_available() and torch.cuda.set_device().")])])])]),t._v(" "),e("h3",{attrs:{id:"g-torchscript-and-jit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#g-torchscript-and-jit"}},[t._v("#")]),t._v(" g. TorchScript and JIT")]),t._v(" "),e("p",[t._v("The torch.jit module enables exporting models for deployment.")]),t._v(" "),e("ul",[e("li",[t._v("Source Code: torch/jit/")]),t._v(" "),e("li",[t._v("Key Features:\n"),e("ul",[e("li",[t._v("Converts PyTorch models to a graph-based intermediate representation.")]),t._v(" "),e("li",[t._v("Optimizes and serializes models for inference.")])])])]),t._v(" "),e("h2",{attrs:{id:"_3-torch-c-the-c-backend-integration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-torch-c-the-c-backend-integration"}},[t._v("#")]),t._v(" 3. torch/_C/: The C++ Backend Integration")]),t._v(" "),e("p",[t._v("The torch/_C/ directory provides Python bindings to the C++ backend using Pybind11.")]),t._v(" "),e("p",[e("strong",[t._v("Purpose")]),t._v(":")]),t._v(" "),e("ul",[e("li",[t._v("Exposes the ATen tensor library, dispatcher, and other C++ components to Python.")]),t._v(" "),e("li",[t._v("Many high-performance functions are implemented in C++ and accessed via _C.")])]),t._v(" "),e("h2",{attrs:{id:"_4-interaction-between-python-and-c"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-interaction-between-python-and-c"}},[t._v("#")]),t._v(" 4. Interaction Between Python and C++")]),t._v(" "),e("p",[t._v("The torch module serves as a bridge between Python and the C++ backend:\n"),e("strong",[t._v("Python API")]),t._v(":")]),t._v(" "),e("ul",[e("li",[t._v("Users interact with torch APIs in Python.")]),t._v(" "),e("li",[t._v("Example: torch.add, torch.nn.Linear.\n"),e("ul",[e("li",[t._v("Dispatcher: Calls are routed to C++ implementations via the PyTorch dispatcher.")]),t._v(" "),e("li",[t._v("Execution: The backend executes the operation (e.g., using ATen or CUDA).")])])])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://github.com/user-attachments/assets/90df5ece-c51f-47fa-b731-f2e4c0415df0",alt:"image"}})])])}),[],!1,null,null,null);e.default=a.exports}}]);
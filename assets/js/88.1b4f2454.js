(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{538:function(e,t,a){"use strict";a.r(t);var i=a(8),r=Object(i.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("ol",[t("li",[e._v("[1900] Mixed Precision Training")]),e._v(" "),t("li",[e._v("[1519] Training Compute-Optimal Large Language Models")]),e._v(" "),t("li",[e._v("[440] Measuring the Effects of Data Parallelism on Neural Network Training")]),e._v(" "),t("li",[e._v("[341] ZeRO-Offload: Democratizing Billion-Scale Model Training")]),e._v(" "),t("li",[e._v("[255] FlexGen: High-Throughput Generative Inference of Large Language Models with a Single GPU")]),e._v(" "),t("li",[e._v("[142] Performance, Design, and Autotuning of Batched GEMM for GPUs")]),e._v(" "),t("li",[e._v("[31] LLM Inference Unveiled Survey and Roofline Model Insights")]),e._v(" "),t("li",[e._v("[13] Inference Scaling Laws: An Empirical Analysis of Compute-Optimal Inference for LLM Problem-Solving")]),e._v(" "),t("li",[e._v("[1] FlattenQuant: Breaking Through the Inference Compute-bound for Large Language Models with Per-tensor Quantization")])]),e._v(" "),t("hr"),e._v(" "),t("h3",{attrs:{id:"_1900-mixed-precision-training"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1900-mixed-precision-training"}},[e._v("#")]),e._v(" [1900] Mixed Precision Training")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/015ccb67-ef34-4c76-ad52-10618c578ad7",alt:"image"}})]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/1a564342-e231-42a4-99d5-e9fef4500a1a",alt:"image"}})]),e._v(" "),t("p",[t("strong",[e._v("Loss Scaling")])]),e._v(" "),t("p",[e._v("Note that much of the FP16 representable range was left unused, while many values were below the minimum representable range and became zeros."),t("br"),e._v("\nScaling up the gradients will shift them to occupy more of the representable range and preserve values that are otherwise lost to zeros."),t("br"),e._v("\nThis particular network diverges when gradients are not scaled, but scaling them by a factor of 8 (increasing the exponents by 3) is sufficient to match the accuracy achieved with FP32 training.")]),e._v(" "),t("p",[e._v("activation gradient values below 2^−27 in magnitude were irrelevant to the training of this model, but values in the [2^−27, 2^−24) range were important to preserve.")]),e._v(" "),t("p",[e._v("One efficient way to shift the gradient values into FP16-representable range is to scale the loss value computed in the forward pass, prior to starting back-propagation.")]),e._v(" "),t("p",[e._v("By chain rule back-propagation ensures that all the gradient values are scaled by the same amount.")]),e._v(" "),t("p",[e._v("The gradients need to be unscaled before the final weight update.")]),e._v(" "),t("hr"),e._v(" "),t("h3",{attrs:{id:"_1519-training-compute-optimal-large-language-models"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1519-training-compute-optimal-large-language-models"}},[e._v("#")]),e._v(" [1519] Training Compute-Optimal Large Language Models")]),e._v(" "),t("p",[t("strong",[e._v("Fix model sizes and vary number of training tokens")]),e._v(" "),t("img",{attrs:{src:"https://github.com/user-attachments/assets/7c6f0cec-cc66-4b28-a1eb-035aee0ef342",alt:"image"}})]),e._v(" "),t("p",[e._v("On the left we show all of our different runs. We launched a range of model sizes going from 70M to 10B, each for four different cosine cycle lengths."),t("br"),e._v("\nFrom these curves, we extracted the envelope of minimal loss per FLOP, and we used these points to estimate the optimal model size (center) for a given compute budget and the optimal number of training tokens (right)."),t("br"),e._v("\nIn green, we show projections of optimal model size and training token count based on the number of FLOPs used to train Gopher (5.76 × 1023).")]),e._v(" "),t("p",[t("strong",[e._v("IsoFLOP profiles")]),e._v(" "),t("img",{attrs:{src:"https://github.com/user-attachments/assets/bf7aa98a-ca33-474e-bdfe-706a95f20a94",alt:"image"}})]),e._v(" "),t("p",[e._v("For various model sizes, we choose the number of training tokens such that the final FLOPs is a constant."),t("br"),e._v("\nThe cosine cycle length is set to match the target FLOP count."),t("br"),e._v("\nWe find a clear valley in loss, meaning that for a given FLOP budget there is an optimal model to train (left)."),t("br"),e._v("\nUsing the location of these valleys, we project optimal model size and number of tokens for larger models (center and right)."),t("br"),e._v("\nIn green, we show the estimated number of parameters and tokens for an optimal model trained with the compute budget of Gopher.")]),e._v(" "),t("hr"),e._v(" "),t("h3",{attrs:{id:"_440-measuring-the-effects-of-data-parallelism-on-neural-network-training-google"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_440-measuring-the-effects-of-data-parallelism-on-neural-network-training-google"}},[e._v("#")]),e._v(" [440] Measuring the Effects of Data Parallelism on Neural Network Training [Google]")]),e._v(" "),t("h4",{attrs:{id:"steps-to-result-depends-on-batch-size-in-a-similar-way-across-problems"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#steps-to-result-depends-on-batch-size-in-a-similar-way-across-problems"}},[e._v("#")]),e._v(" Steps to Result Depends on Batch Size in a Similar Way Across Problems.")]),e._v(" "),t("p",[e._v("In all cases, as the batch size grows, there is an initial period of perfect scaling (indicated with a dashed line) where the steps needed to achieve the error goal\nhalves for each doubling of the batch size."),t("br"),e._v("\nThen there is a region of diminishing returns that eventually leads to a region of maximal data parallelism where additional parallelism provides no benefit whatsoever.")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/afb695c3-1503-45cc-a123-37cd8110880e",alt:"image"}})]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/a132a4fc-f469-4605-b522-558345f0b9c3",alt:"image"}})]),e._v(" "),t("p",[e._v("If the curves in Figure 1 were very sensitive to the goal validation error, then measuring the steps needed to reach our particular choice of the goal would not be a meaningful proxy for training speed.\\")]),e._v(" "),t("p",[e._v("For small changes in the goal validation error, we do not care about vertical shifts as long as the transition points between the three scaling regions remain relatively unchanged.\\")]),e._v(" "),t("p",[e._v("Figure 2 shows that varying the error goal only vertically shifts the stepsto-result curve, at least for modest variations centered around a good absolute validation error.")]),e._v(" "),t("p",[e._v("Furthermore, although we ultimately care about out-of-sample error, if our plots looked very different when measuring the steps needed to reach a particular training error, then we would need to include both curves when presenting our results.")]),e._v(" "),t("h4",{attrs:{id:"validating-our-measurement-protocol"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#validating-our-measurement-protocol"}},[e._v("#")]),e._v(" Validating Our Measurement Protocol")]),e._v(" "),t("h4",{attrs:{id:"some-models-can-exploit-much-larger-batch-sizes-than-others"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#some-models-can-exploit-much-larger-batch-sizes-than-others"}},[e._v("#")]),e._v(" Some Models Can Exploit Much Larger Batch Sizes Than Others")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/d4e1c07a-5e03-42f4-94fc-e750175b1396",alt:"image"}})]),e._v(" "),t("p",[t("strong",[e._v("This might be the begining of the scale law.")])]),e._v(" "),t("h4",{attrs:{id:"momentum-extends-perfect-scaling-to-larger-batch-sizes-but-matches-plain-sgd-at-small-batch-sizes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#momentum-extends-perfect-scaling-to-larger-batch-sizes-but-matches-plain-sgd-at-small-batch-sizes"}},[e._v("#")]),e._v(" Momentum Extends Perfect Scaling to Larger Batch Sizes, but Matches Plain SGD at Small Batch Sizes")]),e._v(" "),t("h4",{attrs:{id:"the-data-set-matters-at-least-somewaht"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#the-data-set-matters-at-least-somewaht"}},[e._v("#")]),e._v(" The Data Set Matters, at Least Somewaht")]),e._v(" "),t("h4",{attrs:{id:"regularization-can-be-more-helpful-at-some-batch-sizes-than-others"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#regularization-can-be-more-helpful-at-some-batch-sizes-than-others"}},[e._v("#")]),e._v(" Regularization Can Be More Helpful at Some Batch Sizes than Others")]),e._v(" "),t("h4",{attrs:{id:"the-best-learning-rate-and-momentrum-vary-with-batch-size"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#the-best-learning-rate-and-momentrum-vary-with-batch-size"}},[e._v("#")]),e._v(" The Best Learning Rate and Momentrum Vary with Batch Size")]),e._v(" "),t("h4",{attrs:{id:"solution-quality-depends-on-compute-budget-more-than-batch-size"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#solution-quality-depends-on-compute-budget-more-than-batch-size"}},[e._v("#")]),e._v(" Solution Quality Depends on Compute Budget More Than Batch Size")]),e._v(" "),t("p",[e._v("Taken together, these observations suggest that in practice the relevant question is not which batch size leads to the best performance, but rather how compute budget varies as a function of batch size.")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/a7164eb8-4ff2-4e9f-a68f-8538d4ce54b4",alt:"image"}})]),e._v(" "),t("hr"),e._v(" "),t("h3",{attrs:{id:"_142-performance-design-and-autotuning-of-batched-gemm-for-gpus"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_142-performance-design-and-autotuning-of-batched-gemm-for-gpus"}},[e._v("#")]),e._v(" [142] Performance, Design, and Autotuning of Batched GEMM for GPUs")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/ad7a256c-91eb-4087-a8de-ccfeb05ea8a3",alt:"image"}})]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/f205bad1-19a3-4843-8fca-cc12cfa7298a",alt:"image"}})]),e._v(" "),t("hr"),e._v(" "),t("h3",{attrs:{id:"_341-zero-offload-democratizing-billion-scale-model-training"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_341-zero-offload-democratizing-billion-scale-model-training"}},[e._v("#")]),e._v(" [341] ZeRO-Offload: Democratizing Billion-Scale Model Training")]),e._v(" "),t("p",[e._v("Key Sentence: Offload calucation of updating fp32 parameter in CPU to save memory.")]),e._v(" "),t("p",[e._v("Mixed precision training often keeps two copies of the parameters, one in float-16 (fp16) and the other in float-32 (fp32)."),t("br"),e._v("\nThe gradients are stored in fp16. "),t("br"),e._v("\nIn addition to the parameters and gradients, the Adam optimizer keeps track of the momentum and variance of the gradients. These optimizer states are stored in fp32.")]),e._v(" "),t("p",[e._v("training a model in mixed precision with the Adam optimizer requires at least:")]),e._v(" "),t("ul",[t("li",[e._v("2 bytes of memory for each fp16 parameter and gradient")]),e._v(" "),t("li",[e._v("4 byte of memory for each fp32 parameter")]),e._v(" "),t("li",[e._v("moementum and variance of each gradient.")])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/43a0baa2-56b3-4c54-bfcc-6890f8bf44ef",alt:"image"}})]),e._v(" "),t("ul",[t("li",[e._v("2M parameter FP16")]),e._v(" "),t("li",[e._v("2M gradient FP16")]),e._v(" "),t("li",[e._v("12M for parameter, momentum, variance FP32")])]),e._v(" "),t("p",[t("strong",[e._v("In total, a model with M parameters requires 16×M bytes of memory.")])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/399fc07d-70d2-4db4-b6d6-988f7b82aaed",alt:"image"}})]),e._v(" "),t("h4",{attrs:{id:"offload-update-of-parameter-to-cpu"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#offload-update-of-parameter-to-cpu"}},[e._v("#")]),e._v(" Offload update of parameter to CPU")]),e._v(" "),t("p",[e._v("FWD-BWD Super node in GPU "),t("br"),e._v("\nUpdate Super node in CPU")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/b99080e4-74a2-41ea-bfcc-a1548089f3b4",alt:"image"}})]),e._v(" "),t("h4",{attrs:{id:"cpu-optimizer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cpu-optimizer"}},[e._v("#")]),e._v(" CPU optimizer")]),e._v(" "),t("ol",[t("li",[e._v("SIMD vector instruction [15] for fully exploiting the hardware parallelism supported on CPU architectures.")]),e._v(" "),t("li",[e._v("Loop unrolling [31], an effective technique for increasing instruction level parallelism that is crucial for better memory bandwidth utilization.")]),e._v(" "),t("li",[e._v("OMP multithreading for effective utilization of multiple cores and threads on the CPU in parallel.")])]),e._v(" "),t("h4",{attrs:{id:"one-step-delayed-parameter-update"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#one-step-delayed-parameter-update"}},[e._v("#")]),e._v(" One-Step Delayed Parameter Update")]),e._v(" "),t("p",[e._v("Despite using a highly optimized CPU optimizer, the CPU computation overhead can become a bottleneck during training with very small batch sizes, when the GPU computation time is not much larger than CPU compute."),t("br"),e._v("\nFor such limited cases, we develop one-step delayed parameter update (DPU) that overlaps CPU and GPU compute to hide the CPU computation overhead by delaying the parameter update by a single step.")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/6778a198-a4a5-48e9-b029-bb4161b46d42",alt:"image"}})]),e._v(" "),t("hr"),e._v(" "),t("h3",{attrs:{id:"_255-flexgen-high-throughput-generative-inference-of-large-language-models-with-a-single-gpu"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_255-flexgen-high-throughput-generative-inference-of-large-language-models-with-a-single-gpu"}},[e._v("#")]),e._v(" [255] FlexGen: High-Throughput Generative Inference of Large Language Models with a Single GPU")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("We formally define a search space of possible offloading strategies by considering computation schedule, tensor placement, and computation delegation."),t("br"),e._v("\nWe prove that our search space captures a computation order with I/O complexity within 2× of optimality."),t("br"),e._v("\nWe then develop a linear programming-based search algorithm to optimize the throughput within the search space.")])]),e._v(" "),t("li",[t("p",[e._v("We show that it is possible to compress both the weights and KV cache for LLMs like OPT-175B to 4 bits without retraining or calibration, all with negligible\naccuracy loss."),t("br"),e._v("\nThis is achieved through fine-grained groupwise quantization (Shen et al., 2020), which is suitable for reducing I/O costs and memory usage during offloading.")])])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/f82b1417-22f4-42a3-9206-d09994df5307",alt:"image"}})]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/d7d16c50-4988-4daf-8e16-fa97a5788407",alt:"image"}})]),e._v(" "),t("p",[t("strong",[e._v("All existing systems (Aminabadi et al., 2022; HuggingFace, 2022) traverse the graph row-by-row, as shown in Fig. 3(a).")]),e._v(" "),t("br"),e._v("\nThis is reasonable because it is the fastest way to finish the generation for one batch and the KV cache can be freed immediately after a row."),t("br"),e._v("\nHowever, because every two contiguous squares do not share weights, this schedule has to repeatedly load the weights and incurs huge I/O costs.")]),e._v(" "),t("hr"),e._v(" "),t("h3",{attrs:{id:"_13-inference-scaling-laws-an-empirical-analysis-of-compute-optimal-inference-for-llm-problem-solving"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-inference-scaling-laws-an-empirical-analysis-of-compute-optimal-inference-for-llm-problem-solving"}},[e._v("#")]),e._v(" [13] Inference Scaling Laws: An Empirical Analysis of Compute-Optimal Inference for LLM Problem-Solving")]),e._v(" "),t("p",[e._v("cost-performance trade-offs for inference strategies:")]),e._v(" "),t("ul",[t("li",[e._v("greedy search")]),e._v(" "),t("li",[e._v("majority voting")]),e._v(" "),t("li",[e._v("best-of-n")]),e._v(" "),t("li",[e._v("weighted voting")]),e._v(" "),t("li",[e._v("two different tree search algorithms, using different model sizes and compute budgets.")])]),e._v(" "),t("p",[e._v("Smaller models (e.g., Llemma-7B) can outperform larger models given the same computation budgets "),t("br"),e._v("\nSmaller models paired with advanced inference algorithms yield Pareto-optimal cost-performance tradeoffs. For instance, the Llemma-7B model, equipped with our novel tree search algorithm, consistently outperforms Llemma-34B with standard majority voting on the MATH benchmark across all FLOPs budgets.")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/2e085a00-2755-48b9-8d23-bf1f8dba1488",alt:"image"}})]),e._v(" "),t("p",[e._v("the accuracy of the language model will ultimately saturate to a fixed limit which is determined by the output probabilities assigned by the model, exhibiting exponential convergence speed through sampling and voting."),t("br"),e._v("\nthis highlights the necessity for more sophisticated inference algorithms.")]),e._v(" "),t("p",[e._v("the commonly-used MCTS method does not perform well with weighted voting, as it often yields many unfinished solutions, hence having less effective votes.")]),e._v(" "),t("p",[e._v("To address this issue, we propose a novel tree search algorithm, "),t("strong",[e._v("REward BAlanced SEarch (REBASE)")]),e._v(", which pairs well with weighted voting and achieves a Pareto-optimal trade-off between accuracy and inference\ncompute."),t("br"),e._v("\nThe key idea of REBASE is to use a node-quality reward to control node expansion, which eliminates the need for explicit rollouts while ensuring enough candidate solutions for voting.")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/d3214e44-c71a-4f18-9da4-4e4e2f543fd3",alt:"image"}})]),e._v(" "),t("h4",{attrs:{id:"inference-strategy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#inference-strategy"}},[e._v("#")]),e._v(" Inference Strategy")]),e._v(" "),t("p",[e._v("Greedy search. This strategy generates tokens one at a time by selecting the highest probability token at each step. It is computationally efficient but often suboptimal in terms of diversity.")]),e._v(" "),t("ul",[t("li",[e._v("Best-of-n. This strategy, also known as rejection sampling, generates a set of candidates and chooses the one with the highest score given by the reward model.")]),e._v(" "),t("li",[e._v("Majority voting. In this strategy, a set of candidates are generated, and the final answer to the problem is determined by the most frequently occurring answer in all the outputs.")]),e._v(" "),t("li",[e._v("Weighted majority voting. This strategy is a variant of majority voting in which the candidates are weighted based on the scores given by the reward model.")])]),e._v(" "),t("p",[e._v("Sampling-based if it uses a standard autoregressive sampling algorithm (e.g., temperature sampling) to generate the candidate set (greedy search is separate, in that it only has a single deterministic candidate).")]),e._v(" "),t("p",[e._v("A tree-search variant uses a tree search to generate the candidate set.")]),e._v(" "),t("p",[t("strong",[e._v("Informally, as long as the reward model is “better than random”, i.e., assigning higher rewards to correct solutions on average, the accuracy limit of weighted majority voting is higher than that of majority voting.")])]),e._v(" "),t("ul",[t("li",[e._v("Monte Carlo Tree Search(MCTS)")])]),e._v(" "),t("p",[e._v("MCTS consumes substantially more resources, often requiring dozens of times more generated tokens than simpler methods.")]),e._v(" "),t("p",[e._v("a significant portion of the paths in the search tree are used to estimate and select nodes, and "),t("strong",[e._v("these paths do not necessarily become a part of the final candidate solution")]),e._v(", although MCTS ensures that the sampled solutions comprise high-quality intermediate steps.")]),e._v(" "),t("p",[e._v("sampling methods generate multiple solutions in parallel and independently, and "),t("strong",[e._v("all the generated sequences are included in the candidate solutions")]),e._v("."),t("br"),e._v("\nHowever, the intermediate steps in these sequences are not guaranteed to be of high quality, as there is no mechanism for pruning poor steps or exploiting promising ones.")]),e._v(" "),t("ul",[t("li",[e._v("Reward Balanced Search")])]),e._v(" "),t("p",[e._v("The REBASE tree search method, illustrated in Fig. 3, inherits the exploitation and pruning properties of tree search, while using a reward model alone to estimate quality of intermediate nodes."),t("br"),e._v("\nThis saves on computation compared to methods such as MCTS, since it does not involve estimate node quality with explicit rollouts."),t("br"),e._v("\nIn short, the underlying idea is to use a process reward model to "),t("strong",[e._v("determine how much each node should be expanded at each depth")]),e._v(".")]),e._v(" "),t("p",[e._v("Namely, REBASE expands nodes at a given depth according to their softmax-normalized reward scores, subject to a total expansion budget. We describe this procedure in more detail below.")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/ba68a712-fdd5-4df0-a4a1-91a0b51e02a6",alt:"image"}})]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/7bb5aca0-ad12-4f72-967e-ab362fc15830",alt:"image"}})]),e._v(" "),t("h4",{attrs:{id:"compute-model-size"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#compute-model-size"}},[e._v("#")]),e._v(" Compute Model Size")]),e._v(" "),t("p",[t("strong",[e._v("Scaling law of compute-optimal inference for model size.")])]),e._v(" "),t("p",[e._v("Initially, sampling many times from smaller models is compute-optimal."),t("br"),e._v("\nAt larger compute budgets the larger models are preferable, since the performance of small models has saturated."),t("br"),e._v("\nAs highlighted in the right panel of Fig. 1, the optimal model size varies based on the inference budget.")]),e._v(" "),t("p",[t("strong",[e._v("Llemma-7B achieves competitive accuracy to Llemma-34B with less compute.")])]),e._v(" "),t("p",[e._v("Llemma-7B requires around 2× less total FLOPs than Llemma-34B to achieve comparable accuracy."),t("br"),e._v("\nThis held across inference strategies (sampling strategies, MCTS, REBASE) and tasks (MATH, GSM8K)."),t("br"),e._v("\nThis result suggests that, with the same training dataset and model family, generating more tokens with a suitable inference strategy using a smaller model can have more favorable cost-performance tradeoffs than using a larger model.")]),e._v(" "),t("h4",{attrs:{id:"compute-optimal-inference-strategy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#compute-optimal-inference-strategy"}},[e._v("#")]),e._v(" Compute-Optimal Inference Strategy")]),e._v(" "),t("p",[t("strong",[e._v("Weaker models gain more from tree search.")])]),e._v(" "),t("p",[e._v("weaker models, as indicated by their lower greedy search accuracy, benefit more from tree search methods like REBASE")]),e._v(" "),t("p",[t("strong",[e._v("REBASE saturates later than sampling with higher accuracy.")])]),e._v(" "),t("p",[e._v("drawing samples from REBASE corresponds to sampling from a policy that assigns high probability to true answers compared to sampling from the underlying language model.")]),e._v(" "),t("hr"),e._v(" "),t("h3",{attrs:{id:"_0-protrain-efficient-llm-training-via-adaptive-memory-management-amd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-protrain-efficient-llm-training-via-adaptive-memory-management-amd"}},[e._v("#")]),e._v(" [0] ProTrain Efficient LLM Training via Adaptive Memory Management [AMD]")]),e._v(" "),t("h4",{attrs:{id:"prior-art"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#prior-art"}},[e._v("#")]),e._v(" Prior Art")]),e._v(" "),t("ol",[t("li",[e._v("They only support coarse-grained control, such as the fixed parameter replication mode (ZeRO-2 or ZeRO-3), and binary options for offloading and gradient checkpointing.\nFor instance, FSDP requires "),t("em",[e._v("all model states")]),e._v(" to be either entirely offloaded to the CPU or kept on the GPU, and all transformer blocks either use\ngradient checkpointing or not at all.")]),e._v(" "),t("li",[e._v("They require significant manual effort to specify various configurations.\nIn DeepSpeed, users must select the ZeRO optimization stage, configure offloading options (CPU or NVMe) for both parameters and optimizer states, and set multiple thresholds for parameter fetching and collective communications.")])]),e._v(" "),t("h4",{attrs:{id:"protrain"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#protrain"}},[e._v("#")]),e._v(" ProTrain")]),e._v(" "),t("ol",[t("li",[e._v("To reduce memory consumption, ProTrain adaptively decides whether to use offloading or gradient checkpointing, determines the amount of model states and activations to offload and the number of transformer blocks to apply gradient checkpointing, all without user inputs.")]),e._v(" "),t("li",[e._v("For computation, ProTrain keeps forward/backward computation on the GPU for efficiency, while dynamically determining the portion of parameter updates to be performed on the CPU and GPU.")])]),e._v(" "),t("p",[e._v("ProTrain proposes a Chunk-Based Model State Management system that organizes model states into uniformly sized chunks, and further introduces persistent chunks and chunk buffers to minimize unnecessary data copying and reduce dynamic memory allocations.")]),e._v(" "),t("p",[e._v("ProTrain also proposes Block-Wise Activation Management to handle activations at the transformer block level, performing swapping or gradient checkpointing as needed for each block.")]),e._v(" "),t("h4",{attrs:{id:"background"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#background"}},[e._v("#")]),e._v(" Background")]),e._v(" "),t("p",[e._v("For the training of large models, it is a common practice to adopt mixed-precision training , which uses reduced precision data types for FWD （Forward Propagation）and BWD (Backward Propagation), while maintaining higher precision for OPTIM (parameter updating) to ensure accuracy.")]),e._v(" "),t("p",[e._v("Memory consumption during training primarily comes from two sources:")]),e._v(" "),t("ul",[t("li",[e._v("model states")]),e._v(" "),t("li",[e._v("residual states")])]),e._v(" "),t("p",[t("strong",[e._v("Model states")]),e._v(" include")]),e._v(" "),t("ul",[t("li",[e._v("parameters")]),e._v(" "),t("li",[e._v("gradients")]),e._v(" "),t("li",[e._v("optimizer states\n"),t("strong",[e._v("residual states")]),e._v(" consist of")]),e._v(" "),t("li",[e._v("activations")]),e._v(" "),t("li",[e._v("temporary buffers")])]),e._v(" "),t("p",[e._v("The computational complexity of the FWD and BWD stages scales with model size and batch size, necessitating their execution on GPUs due to the intensive\ncomputational demands.")]),e._v(" "),t("p",[e._v("In contrast, the OPTIM stage involves simpler operations and can be efficiently offloaded to the CPU (40), which brings significant GPU memory savings by allocating memory-intensive optimizer states on the CPU.")]),e._v(" "),t("h4",{attrs:{id:"chunk-based-model-state-management"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chunk-based-model-state-management"}},[e._v("#")]),e._v(" Chunk Based Model State Management")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/76bba3a2-73bb-49f9-b735-6e2ec9f89044",alt:"image"}})]),e._v(" "),t("h4",{attrs:{id:"block-wise-activation-mangement-layout-and-memory-usage-trend"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#block-wise-activation-mangement-layout-and-memory-usage-trend"}},[e._v("#")]),e._v(" Block-Wise Activation Mangement Layout and Memory Usage Trend")]),e._v(" "),t("p",[e._v("The balance between:")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Activation Swapping\nSwapping indicates that the block will be swapped out the block.")])]),e._v(" "),t("li",[t("p",[e._v("Gradient Checkpointing\ncheckpointing means that the entire block will be recomputed by saving the input tensor of")])])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/99ead105-fa46-4668-8ba0-dd9cc65eabe1",alt:"image"}})]),e._v(" "),t("p",[t("strong",[e._v("The concept of checkpointing comes from TianQi Chen's Paper.")])]),e._v(" "),t("p",[e._v("Training Deep Nets with Sublinear Memory Cost")]),e._v(" "),t("p",[e._v("https://github.com/cybertronai/gradient-checkpointing")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/de7cd168-c6b2-405e-88a4-89b7363ac75f",alt:"image"}})]),e._v(" "),t("hr"),e._v(" "),t("h3",{attrs:{id:"_31-llm-inference-unveiled-survey-and-roofline-model-insights"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_31-llm-inference-unveiled-survey-and-roofline-model-insights"}},[e._v("#")]),e._v(" [31] LLM Inference Unveiled Survey and Roofline Model Insights")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/ff1e6971-5ae9-4793-9785-23828db358c4",alt:"image"}})]),e._v(" "),t("p",[e._v("The inference process of Large Language Models (LLMs) is divided into two stages:")]),e._v(" "),t("ul",[t("li",[e._v("the Prefill Stage")]),e._v(" "),t("li",[e._v("the Decode Stage")])]),e._v(" "),t("p",[e._v("The Prefill Stage serves as the initial step in LLM inference. "),t("br"),e._v("\nIn this stage, the model takes a prompt sequence as input and engages in the generation of a key-value cache (KV cache) for each Transformer layer within the LLM."),t("br"),e._v("\nThe KV cache plays a crucial role in storing and organizing information that the model deems relevant for subsequent token generation. "),t("br"),e._v("\nEach Transformer layer is equipped with its own unique KV cache, and this prefilling process establishes the foundation for the subsequent decoding stage.")]),e._v(" "),t("p",[e._v("The Decode Stage represents the core of the LLM inference process."),t("br"),e._v("\nIn the Decode Stage, the model uses the KV caches prepared earlier and might add new information to them."),t("br"),e._v("\nThe goal here is to generate tokens, which are essentially words or parts of words."),t("br"),e._v("\nThis happens step by step."),t("br"),e._v("\nThe creation of each new token is influenced by the tokens that were generated before it, like building a sentence word by word.")]),e._v(" "),t("h4",{attrs:{id:"memory-bound-compute-bound"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#memory-bound-compute-bound"}},[e._v("#")]),e._v(" Memory Bound & Compute Bound")]),e._v(" "),t("p",[e._v("If the layer is memory-bound, consider optimization techniques such as quantization, kernel fusion and increasing batch size to alleviate the memory footprint.")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/63f22384-aec3-4d31-9c37-1778fdc04c4a",alt:"image"}})]),e._v(" "),t("p",[e._v("It implies that the layer is constrained by computation (compute-bound), with some memory units potentially remaining idle."),t("br"),e._v("\nIn this case, we should investigate strategies such as enabling low-bit computation to enhance computational efficiency.")]),e._v(" "),t("h4",{attrs:{id:"memory-access"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#memory-access"}},[e._v("#")]),e._v(" Memory Access")]),e._v(" "),t("p",[e._v("Quantizing tensors in LLM can significantly reduce memory access, resulting in fewer data bytes to be moved for the same amount of computation.")]),e._v(" "),t("p",[e._v("This increase in arithmetic intensity contributes to the Roofline model, leading to three scenarios:")]),e._v(" "),t("ol",[t("li",[e._v("After quantization, the arithmetic intensity remains within the memory-bound range."),t("br"),e._v("\nWith the improvement in arithmetic intensity, the average data access per computation is reduced, alleviating the pressure on data memory access."),t("br"),e._v("\nConsequently, the the-oretical performance is enhanced. This can greatly boost the performance during the memory-bound decode stage.\\")]),e._v(" "),t("li",[e._v("The arithmetic intensity transitions from being memory-bound to compute-bound."),t("br"),e._v("\nThis shift also reduces the pressure on data memory access, resulting in improved theoretical performance.")]),e._v(" "),t("li",[e._v("Both before and after quantization, the arithmetic intensity remains within the compute-bound range."),t("br"),e._v("\nIn this case, there is no performance improvement.\nFor example, this scenario can occur during the compute-bound prefill stage or when the batch size is large in the decode stage.")])]),e._v(" "),t("p",[e._v("Large Batch Size: It can be seen that on the right of Figure8, there is no difference from W1-W8.\nCompute-bound prefill stage: It can be seen that on the right of Figure9, there is no difference from W1-W8.")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/b826c5ab-8fa6-4ee5-b832-291e92068df4",alt:"image"}})]),e._v(" "),t("p",[e._v("The trend is from "),t("strong",[e._v("Memory Bound")]),e._v(" to "),t("strong",[e._v("Compute Bound")]),e._v(".")]),e._v(" "),t("h4",{attrs:{id:"algorithms-for-fast-decoding"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#algorithms-for-fast-decoding"}},[e._v("#")]),e._v(" Algorithms for Fast Decoding")]),e._v(" "),t("ul",[t("li",[e._v("Early Exiting")]),e._v(" "),t("li",[e._v("Contextual Sparsity\nThe paper reveals that contextual sparsity can go up as high as 80%, meaning that the majority of the weights can be left out while still preserving the original model performance."),t("br"),e._v("\nHowever, the chosen weights are dynamic and different for different input tokens.")])]),e._v(" "),t("p",[e._v("To save compute, the paper proposes to train a small MLP network as the Sparse Predictor in front of the Multi-Head Attention (MHA) and the Feed-Forward Networks (FFN) of the LLM")]),e._v(" "),t("ul",[t("li",[e._v("Mixture of Expert")])]),e._v(" "),t("p",[e._v("The mixture of expert (MoE) technique is a well-studied topic (Yuksel et al. [2012]) that effectively decouples the parameter count of the model and the computation FLOPs required by the model training and inference.")]),e._v(" "),t("p",[e._v("An expert network is inserted into the transformer architecture to replace the FFN layers. Also, a gating function is introduced between the Multi-Head Attention and the expert network which aims to select the best-fit expert or experts for the given input token.")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/a5be8384-39e3-4a21-8428-695bbc082c45",alt:"image"}})]),e._v(" "),t("p",[e._v("Although both rely on the input token to determine sparse structure, We deliberately separate MoE and the contextual sparsity techniques because the latter operates on pre-trained dense language models and exploits the sparsity from the dense neural networks, while the prior trains a sparse model from the beginning.")]),e._v(" "),t("h4",{attrs:{id:"speculative-decoding"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#speculative-decoding"}},[e._v("#")]),e._v(" Speculative Decoding")]),e._v(" "),t("ul",[t("li",[e._v("LLM Distribution Preserving")]),e._v(" "),t("li",[e._v("Building a Three of Draft Tokens")]),e._v(" "),t("li",[e._v("Knoweledge Distillation and Self-Speculative Decoding")])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/d1f005c8-c8b9-4cb8-a81e-efbdcef1b231",alt:"image"}})]),e._v(" "),t("h4",{attrs:{id:"parallel-decoding"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parallel-decoding"}},[e._v("#")]),e._v(" Parallel Decoding")]),e._v(" "),t("ul",[t("li",[e._v("Simultaneously Predicting Multiple Future Tokens")]),e._v(" "),t("li",[e._v("Retrieval of Frequent N-grams")]),e._v(" "),t("li",[e._v("Hierarchical Structure In Language")]),e._v(" "),t("li",[e._v("Jacobi and Gaussian-Seidel Iterative Algorithms")])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/dc57ae33-9549-4e10-bdcd-c4dce4f91ee4",alt:"image"}})]),e._v(" "),t("h4",{attrs:{id:"memory-mangement-and-workload-offloading"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#memory-mangement-and-workload-offloading"}},[e._v("#")]),e._v(" Memory Mangement and Workload Offloading")]),e._v(" "),t("p",[e._v("The length of the user’s input prompt may vary, affecting the length of the sequence in the prefill phase."),t("br"),e._v("\nAdditionally, the sequence length increases incrementally during the decode phase as tokens are generated.")]),e._v(" "),t("p",[t("strong",[e._v("Page Attention")]),e._v(" efficiently handles the KV cache by dividing it into blocks.")]),e._v(" "),t("p",[e._v("This mapping is similar to how virtual memory works in a CPU’s memory management system.")]),e._v(" "),t("p",[e._v("DeepSpeed-inference introduces "),t("strong",[e._v("ZeRO-Inference")]),e._v(", which offloads the weights of large models to CPU memory.")]),e._v(" "),t("p",[e._v("This mechanism performs well with large batch sizes because the increased batch size increase the computation requirement and make the computation latency overlap the latency of fetching model weights,")]),e._v(" "),t("p",[t("strong",[e._v("FlexGen")]),e._v(" provides a way to explore different ways of offloading computations considering constraints imposed by available hardware resources from the GPU, CPU, and disk.")]),e._v(" "),t("hr"),e._v(" "),t("h3",{attrs:{id:"_1-flattenquant-breaking-through-the-inference-compute-bound-for-large-language-models-with-per-tensor-quantization"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-flattenquant-breaking-through-the-inference-compute-bound-for-large-language-models-with-per-tensor-quantization"}},[e._v("#")]),e._v(" [1] FlattenQuant: Breaking Through the Inference Compute-bound for Large Language Models with Per-tensor Quantization")]),e._v(" "),t("p",[e._v("FlattenQuant can directly use 4 bits to achieve 48.29% of the linear layer calculation in LLMs, with the remaining layers using 8 bits.")]),e._v(" "),t("p",[e._v("The 4-bit matrix multiplication introduced in the FlattenQuant method can effectively address the compute-bound caused by large matrix calculation."),t("br"),e._v("\nOur work achieves up to 2× speedup and 2.3× memory reduction for LLMs with negligible loss in accuracy.")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/dee83087-aa07-4441-b6f6-31a8eafedaed",alt:"image"}})]),e._v(" "),t("p",[t("strong",[e._v("Framework")]),e._v(" "),t("img",{attrs:{src:"https://github.com/user-attachments/assets/d386534e-97ad-4ac6-a34e-83545e1e68b2",alt:"image"}})]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/1924a296-1948-46c1-b835-a99bfa229b03",alt:"image"}})])])}),[],!1,null,null,null);t.default=r.exports}}]);
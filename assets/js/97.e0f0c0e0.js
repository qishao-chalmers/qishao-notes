(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{549:function(e,t,a){"use strict";a.r(t);var i=a(8),r=Object(i.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("ol",[t("li",[e._v("[C99 Y2024] Full Parameter Fine-tuning for Large Language Models with Limited Resources")]),e._v(" "),t("li",[e._v("[C25 Y2024] FLORA: Low-Rank Adapters Are Secretly Gradient Compressors")]),e._v(" "),t("li",[e._v("[C42 Y2024] GaLore: Memory-Efficient LLM Training by Gradient Low-Rank Projection")]),e._v(" "),t("li",[e._v("[C0 2024] CompAct: Compressed Activations for Memory-Efficient LLM Training")]),e._v(" "),t("li",[e._v("[C2 2024] ProTrain: Efficient LLM Training via Adaptive Memory Management")])]),e._v(" "),t("hr"),e._v(" "),t("h2",{attrs:{id:"memory-optimizations"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#memory-optimizations"}},[e._v("#")]),e._v(" "),t("strong",[e._v("Memory Optimizations")])]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("Activation Checkpointing")]),t("br"),e._v("\nRecomputation during backward pass.")]),e._v(" "),t("li",[t("strong",[e._v("Quantization-Aware Training (QAT)")]),t("br"),e._v("\nTrain with INT8/FP8 precision.")]),e._v(" "),t("li",[t("strong",[e._v("Dynamic Memory Allocation")]),t("br"),e._v("\nBuffer reuse to avoid fragmentation.")]),e._v(" "),t("li",[t("strong",[e._v("Low-Rank Gradient Projection (GaLore)")]),t("br"),e._v(" "),t("strong",[e._v("NEW")]),e._v(" Compress gradients via low-rank approximations during training.")])]),e._v(" "),t("hr"),e._v(" "),t("h2",{attrs:{id:"_1-c99-y2024-full-parameter-fine-tuning-for-large-language-models-with-limited-resources"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-c99-y2024-full-parameter-fine-tuning-for-large-language-models-with-limited-resources"}},[e._v("#")]),e._v(" 1. [C99 Y2024] Full Parameter Fine-tuning for Large Language Models with Limited Resources")]),e._v(" "),t("ul",[t("li",[e._v("Use SGD instead of Adam for fine-tuning weights.")]),e._v(" "),t("li",[e._v("Update layer by layer in backward pass. Traditional Adam will backward probgation all layers and then update weigths.")]),e._v(" "),t("li",[e._v("SGD also avoid state memory of ADAM.")])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/c1e7d018-84e2-49f7-bd74-cdf4edaa0343",alt:"image"}})]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/a98a808f-1cb1-4432-b0d0-7c51e9f4ee48",alt:"image"}})]),e._v(" "),t("hr"),e._v(" "),t("h2",{attrs:{id:"_2-c25-y2024-flora-low-rank-adapters-are-secretly-gradient-compressors"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-c25-y2024-flora-low-rank-adapters-are-secretly-gradient-compressors"}},[e._v("#")]),e._v(" 2. [C25 Y2024] FLORA: Low-Rank Adapters Are Secretly Gradient Compressors")]),e._v(" "),t("p",[e._v("This paper discovers that LORA can be approximated by a random projection.")]),e._v(" "),t("p",[e._v("LORA restricts overall weights update matrices to be low-rank.")]),e._v(" "),t("p",[e._v("FLORA use "),t("em",[e._v("random projection matrix")]),e._v(", which allows high-rank update gradients.")]),e._v(" "),t("blockquote",[t("p",[e._v("Our intuition arises from investigating LoRA and observing that a LoRA update is dominated by a random projection, which compresses the gradient into a\nlower-dimensional space.\nOur FLORA resamples the random projection and is able to mitigate the low-rank limitation of LoRA. Further, our approach only stores the compressed gradient\naccumulation and momentum, thus saving the memory usage of optimization states to the sublinear level.")])]),e._v(" "),t("p",[e._v("Gradident Accumulation:")]),e._v(" "),t("ul",[t("li",[e._v("Gradient accumulation stores the sum of gradients over multiple batches to simulate a larger effective batch size (helpful when memory limits prevent using large batches).")]),e._v(" "),t("li",[e._v("Normally, this requires a memory buffer equal to the model size to store the full gradient matrix.")])]),e._v(" "),t("p",[e._v("Momentum")]),e._v(" "),t("ul",[t("li",[e._v("Momentum smooths gradient updates by keeping an exponentially weighted moving average (EMA) of past gradients.")]),e._v(" "),t("li",[e._v("Maintaining momentum for large models requires significant memory since an additional buffer equal to the model size is needed.")])]),e._v(" "),t("p",[e._v("FLORA Compression:")]),e._v(" "),t("ul",[t("li",[e._v("compress gradients accumulation: Applying a random projection matrix A to reduce the dimensionality of the gradients.")]),e._v(" "),t("li",[e._v("compress momentum: Using random projection to compress the momentum term M.")])]),e._v(" "),t("hr"),e._v(" "),t("h2",{attrs:{id:"_3-c42-y2024-galore-memory-efficient-llm-training-by-gradient-low-rank-projection"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-c42-y2024-galore-memory-efficient-llm-training-by-gradient-low-rank-projection"}},[e._v("#")]),e._v(" 3. [C42 Y2024] GaLore: Memory-Efficient LLM Training by Gradient Low-Rank Projection")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/3ddb7188-8d90-4232-8be1-cb570a74bc56",alt:"image"}})]),e._v(" "),t("blockquote",[t("p",[e._v("Galore: gradient Low-Rank Projection (GaLore), a training strategy that allows fullparameter learning but is more memory-efficient than common low-rank adaptation  methods such as LoRA.\nKey idea is to leverage the slowchanging low-rank structure of the gradient G(m√ón) of the weight matrix W, rather than trying to approximate the weight matrix itself as low rank.\nwhile the weight matrices are not necessarily low-rank, the gradient indeed becomes low-rank during the training for certain gradient forms and associated network\narchitectures.")])]),e._v(" "),t("hr"),e._v(" "),t("h2",{attrs:{id:"_4-c0-2024-compact-compressed-activations-for-memory-efficient-llm-training"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-c0-2024-compact-compressed-activations-for-memory-efficient-llm-training"}},[e._v("#")]),e._v(" 4. [C0 2024] CompAct: Compressed Activations for Memory-Efficient LLM Training")]),e._v(" "),t("img",{staticStyle:{width:"600px",height:"auto"},attrs:{src:"https://github.com/user-attachments/assets/37a40cf7-5a3b-4c55-b847-1fb1e9c732a5"}}),e._v(" "),t("blockquote",[t("p",[e._v("By storing low-rank, compressed activations to be used in the backward pass we greatly reduce the required memory, unlike previous methods which only reduce optimizer overheads or the number of trained parameters.\nCompAct saves low-rank compressed activations during the forward pass, instead of the full activation tensors.\nThe resulting gradients are low-rank as well, also reducing the size of optimizer states.\nAs CompAct decompresses the gradients back to full size only for the update step, it compresses a large part of the compute graph, which in turn translates to major memory savings.")])]),e._v(" "),t("p",[e._v("CompAct is a logical next step from previous work, moving from "),t("strong",[e._v("low-rank parameters")]),e._v(", through "),t("strong",[e._v("compressed low-rank gradients")]),e._v(" , to "),t("strong",[e._v("compressed activations")]),e._v(".")]),e._v(" "),t("blockquote",[t("p",[e._v("compared to GaLore, our approach may be viewed as a simple change in the order of operations, applying the compression one step before GaLore does, to the "),t("strong",[e._v("activations")]),e._v(" rather than to the "),t("strong",[e._v("gradients")]),e._v(".")])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/c0e05d1b-b19b-4bb0-92df-4842010b6502",alt:"image"}})]),e._v(" "),t("hr"),e._v(" "),t("h2",{attrs:{id:"_5-c2-2024-protrain-efficient-llm-training-via-adaptive-memory-management"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-c2-2024-protrain-efficient-llm-training-via-adaptive-memory-management"}},[e._v("#")]),e._v(" 5. [C2 2024] ProTrain: Efficient LLM Training via Adaptive Memory Management")]),e._v(" "),t("h3",{attrs:{id:"background"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#background"}},[e._v("#")]),e._v(" Background")]),e._v(" "),t("p",[t("strong",[e._v("Model State")]),e._v(": Zero Redundancy Optimizer (ZeRO) (37; 51) distributes them across multiple GPUs, leveraging aggregated memory capacity to accommodate large models in data parallelism.")]),e._v(" "),t("p",[t("strong",[e._v("activations, gradient checkpointing")]),e._v(" reduces memory consumption by discarding certain activations during the forward pass and recomputing them during the backward pass.")]),e._v(" "),t("h3",{attrs:{id:"contribution"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#contribution"}},[e._v("#")]),e._v(" Contribution")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("To reduce memory consumption, ProTrain adaptively decides whether to use offloading or gradient checkpointing, determines the amount of model states and activations to offload and the number of transformer blocks to apply gradient checkpointing, all without user inputs.")])]),e._v(" "),t("li",[t("p",[e._v("For computation, ProTrain keeps forward/backward computation on the GPU for efficiency, while dynamically determining the portion of parameter updates to be performed on the CPU and GPU.\nAdditionally, ProTrain performs CPU parameter updates concurrently with backward computation on the GPU to hide the overhead of CPU updates.")])]),e._v(" "),t("li",[t("p",[e._v("ProTrain overlaps IO communication with computation by proactively prefetching future parameters during forward/backward computation, parallelizing gradient offloading with backward computation, and swapping activations only when\nthe overhead can be hidden by computation.")])]),e._v(" "),t("li",[t("p",[e._v("ProTrain proposes a Chunk-Based Model State Management system that organizes model states into uniformly sized chunks")])]),e._v(" "),t("li",[t("p",[e._v("ProTrain also proposes "),t("strong",[e._v("Block-Wise Activation Management")]),e._v(" to handle activations at the "),t("strong",[e._v("transformer block")]),e._v(" level, performing swapping or gradient checkpointing as needed for each block.")])]),e._v(" "),t("li",[t("p",[e._v("To hide the swapping overhead, ProTrain applies interleaved swapping and checkpointing, where each block of swapping is typically followed by multiple blocks of checkpointing.\nThis ensures that ProTrain‚Äôs swapping reduces memory usage without compromising performance.")])])]),e._v(" "),t("p",[t("strong",[e._v("Discussion about zero")])]),e._v(" "),t("p",[e._v("ZeRO operates in three stages")]),e._v(" "),t("ul",[t("li",[e._v("ZeRO-1 partitions optimizer states across GPUs")]),e._v(" "),t("li",[e._v("ZeRO-2 extends this by also distributing gradients")]),e._v(" "),t("li",[e._v("ZeRO-3 further divides the parameters, which are required to be gathered before forward/backward computation.")])]),e._v(" "),t("p",[t("em",[e._v("The most interesting contribution of this work to me, it is the interleaved gradient checkpointing and swapping.")])]),e._v(" "),t("p",[e._v("Since the training follows the specific sequence:")]),e._v(" "),t("ul",[t("li",[e._v("the last layer: no optimization")]),e._v(" "),t("li",[e._v("the second last layer: gradient checkpointing")]),e._v(" "),t("li",[e._v("the third last layer: swapping")])]),e._v(" "),t("p",[t("strong",[e._v("In the backward pass, blocks without optimization are processed first, consuming activations and freeing memory for subsequent checkpointing and swapping.")])]),e._v(" "),t("img",{staticStyle:{width:"600px",height:"auto"},attrs:{src:"https://github.com/user-attachments/assets/b0daba0b-50b0-4d9d-b94b-1697910afedb"}})])}),[],!1,null,null,null);t.default=r.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{487:function(e,t,s){"use strict";s.r(t);var n=s(8),i=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h3",{attrs:{id:"_1-2024-10-08"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2024-10-08"}},[e._v("#")]),e._v(" 1. 2024-10-08")]),e._v(" "),t("p",[e._v("Create the Framework of Basic Backend")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/a2e5d898-25e0-427d-abe4-6a79dd2eb560",alt:"Screenshot from 2024-10-09 16-32-52"}})]),e._v(" "),t("p",[e._v("Only framework is added, except InstrFormats.td, InstrInfo.td and RegisterInfo.td.")]),e._v(" "),t("p",[e._v("Above tablegen files are copied from https://github.com/rhysd/toy-riscv-backend. These tablegen files are uniform for riscv-compatible backend compilers.")]),e._v(" "),t("h3",{attrs:{id:"_2-2024-10-09"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2024-10-09"}},[e._v("#")]),e._v(" 2. 2024-10-09")]),e._v(" "),t("p",[e._v("When I try to compile sometest.ll with above backend, error:")]),e._v(" "),t("div",{staticClass:"language-console line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('llvm/lib/CodeGen/LLVMTargetMachine.cpp:47:\nvoid llvm::LLVMTargetMachine::initAsmInfo(): Assertion `MRI && "Unable to create reg info"\' failed\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("h4",{attrs:{id:"claude-explains-why-mc-register-info-is-needed"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#claude-explains-why-mc-register-info-is-needed"}},[e._v("#")]),e._v(" Claude explains why MC Register Info is needed")]),e._v(" "),t("p",[e._v("The reason is that MCRegisterInfo is not created.")]),e._v(" "),t("p",[e._v("The function createTinyRISCVMCRegisterInfo is responsible for creating and initializing the MCRegisterInfo object for your TinyRISCV target."),t("br"),e._v("\nThis object provides essential information about the registers available in your target architecture, which is crucial for various stages of code generation and assembly.")]),e._v(" "),t("p",[e._v("Key Functions of createTinyRISCVMCRegisterInfo")]),e._v(" "),t("ol",[t("li",[e._v("Register Initialization:"),t("br"),e._v("\nIt initializes the register information for the TinyRISCV target, including the mapping of register names to register numbers and any special properties of the registers.")]),e._v(" "),t("li",[e._v("Callee-Saved Registers:"),t("br"),e._v("\nThe MCRegisterInfo object typically includes information about which registers are callee-saved, which is important for function call conventions and stack management.")]),e._v(" "),t("li",[e._v("Register Aliases:"),t("br"),e._v("\nIt may define any register aliases, which are alternative names or numbers for the same physical register.")]),e._v(" "),t("li",[e._v("Register Classes:"),t("br"),e._v("\nThe function helps define register classes, which group registers with similar characteristics (e.g., general-purpose registers).")]),e._v(" "),t("li",[e._v("Integration with LLVM:"),t("br"),e._v("\nBy registering the MCRegisterInfo with the LLVM target registry, it ensures that the rest of the LLVM infrastructure can access and use the register information for tasks like instruction selection, register allocation, and assembly printing.")])]),e._v(" "),t("p",[e._v("Example Implementation\nHere's a typical implementation of createTinyRISCVMCRegisterInfo:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("static MCRegisterInfo *createTinyRISCVMCRegisterInfo(const Triple &TT) {\n  MCRegisterInfo *X = new MCRegisterInfo();\n  InitTinyRISCVMCRegisterInfo(X, /* Return address register number */);\n  return X;\n}\n\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("p",[t("strong",[e._v("InitTinyRISCVMCRegisterInfo")]),e._v(" "),t("br"),e._v("\nThis function, usually generated by TableGen, initializes the MCRegisterInfo object with the register definitions specified in your target's TableGen files.")]),e._v(" "),t("p",[t("strong",[e._v("Return Address Register")]),e._v(" "),t("br"),e._v("\nThe function often takes a parameter specifying the register used for the return address, which is important for call and return instructions.")]),e._v(" "),t("p",[e._v("By ensuring that createTinyRISCVMCRegisterInfo is correctly implemented and registered, you provide the necessary register information to the LLVM backend, enabling it to generate and manipulate machine code effectively for your TinyRISCV target.")]),e._v(" "),t("h4",{attrs:{id:"debug"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#debug"}},[e._v("#")]),e._v(" Debug")]),e._v(" "),t("p",[e._v("Spend lots of time on debugs namespace tinyriscv issue")]),e._v(" "),t("p",[e._v("root cause is that:")]),e._v(" "),t("p",[e._v("we need to include TinyRISCVGenRegisterInfo.inc in both "),t("em",[e._v("TinyRISCVMCTargetDesc.h")]),e._v(" and "),t("em",[e._v("TinyRISCVMCTargetDesc.cpp")]),e._v(".")]),e._v(" "),t("p",[e._v("Once for define, another for declare.")]),e._v(" "),t("h3",{attrs:{id:"_3-2024-10-12"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2024-10-12"}},[e._v("#")]),e._v(" 3. 2024-10-12")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("llc  -debug -debug-pass=Structure -march=tinyriscv\ntinyriscv_simpletest.ll\n-o tinyriscv_addition.s\n\nFailed:\nllc: error: target does not support generation of this file type\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("p",[e._v("Try to solve this issue, might due to missing of addPasses in TargetMachine.h/cpp.")]),e._v(" "),t("p",[e._v("when subtarget is not implemented:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("bool runOnFunction(Function &F) override {\n  auto *TM = &getAnalysis<TargetPassConfig>().getTM<TargetMachine>();\n  auto *TLI = TM->getSubtargetImpl(F)->getTargetLowering();\n  return runImpl(F, *TLI);\n}\n\nstatic bool runImpl(Function &F, const TargetLowering &TLI) {\n.....\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br")])]),t("h3",{attrs:{id:"_4-2024-10-13"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2024-10-13"}},[e._v("#")]),e._v(" 4. 2024-10-13")]),e._v(" "),t("p",[e._v("Forget to add getFrameLowering in *TargetMachine.h")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("#11 0x00007e10aebdbd7a llvm::TargetLowering::LowerCall(llvm::TargetLowering::CallLoweringInfo&, llvm::SmallVectorImpl<llvm::SDValue>&) const ...TargetLowering.h:4770:5\n#12 0x00007e10ad58b07b llvm::SelectionDAGISel::LowerArguments(llvm::Function const&) ...SelectionDAGBuilder.cpp:11673:46\n#13 0x00007e10ad679308 llvm::SelectionDAGISel::SelectAllBasicBlocks(llvm::Function const&) ...CodeGen/SelectionDAG/SelectionDAGISel.cpp:1648:19\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[e._v("This is the bug that when called getNumRegisters() in TargetLowering.h, the NumRegisterForVT[VT.getSimpleVT().SimpleTy] returns 0.")]),e._v(" "),t("p",[e._v("The NumRegisterForVT is not initialized in our case.")]),e._v(" "),t("p",[e._v("this is initialized by calling "),t("strong",[e._v("computeRegisterProperties")]),e._v(" in TinyRISCVTargetLowering, which does not called before solving this bug.")])])}),[],!1,null,null,null);t.default=i.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{532:function(e,t,a){"use strict";a.r(t);var r=a(9),i=Object(r.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("ol",[t("li",[e._v("Compiler Assisted Hybrid Implicit and Explicit GPU Memory Management under Unified Address Space")]),e._v(" "),t("li",[e._v("NUBA: Non-Uniform Bandwidth GPUs")])]),e._v(" "),t("hr"),e._v(" "),t("h2",{attrs:{id:"_1-compiler-assisted-hybrid-implicit-and-explicit-gpu-memory-management-under-unified-address-space"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-compiler-assisted-hybrid-implicit-and-explicit-gpu-memory-management-under-unified-address-space"}},[e._v("#")]),e._v(" 1. Compiler Assisted Hybrid Implicit and Explicit GPU Memory Management under Unified Address Space")]),e._v(" "),t("p",[e._v("A compiler-runtime collaborative approach which requires no effort from application developers.")]),e._v(" "),t("p",[e._v("The compiler is responsible for analyzing high level data access behavior, while the runtime takes into account both dynamic execution status and the static information provided by the compiler to optimize data mapping and movement.")]),e._v(" "),t("p",[e._v("Unlike previous memory management proposals that rely heavily on the runtime or OS, our schemes have much lower execution overhead because most of the analysis is performed at compile time.")]),e._v(" "),t("h3",{attrs:{id:"case-study"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#case-study"}},[e._v("#")]),e._v(" Case Study")]),e._v(" "),t("ul",[t("li",[e._v("Prefetching removes GPU page fault overhead effectively")]),e._v(" "),t("li",[e._v("Unified memory helps avoid unnecessary data movement for irregular memory access patterns")]),e._v(" "),t("li",[e._v("Data thrashing harms performance significantly for workloads that exceed the GPU memory capacity")]),e._v(" "),t("li",[e._v("Pinning data to the CPU memory achieves reasonable performance for all workloads")])]),e._v(" "),t("h3",{attrs:{id:"target-reuse-distance"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#target-reuse-distance"}},[e._v("#")]),e._v(" Target Reuse Distance")]),e._v(" "),t("p",[e._v("Ihe target reuse distance is measured in terms of the number of target regions encountered between two adjacent uses of the same data object, in order to simplify compiler analysis.")]),e._v(" "),t("p",[e._v("Its key idea is to preferentially keep data objects that will be reused sooner (i.e., have shorter reuse distance) in GPU memory. I")]),e._v(" "),t("p",[e._v("Given its reuse distance, the next reuse time of a data object can be predicted at a target region invocation.")]),e._v(" "),t("p",[e._v("To achieve this, first, a global timer target region counter (TRC) is employed by the runtime to keep track of the number of target regions that it has encountered so far, as the representation of the current “time”.")]),e._v(" "),t("p",[e._v("We employ a GPU object table (GOT) to track these objects. GOT also records other useful information related to such objects, such as locality per target region and global locality.")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/98005067-c960-4662-af1a-9e82c54c506a",alt:"image"}})]),e._v(" "),t("h3",{attrs:{id:"data-locality-in-a-single-target-region"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#data-locality-in-a-single-target-region"}},[e._v("#")]),e._v(" Data Locality in a Single Target Region")]),e._v(" "),t("p",[e._v("The locality of a data object in one target region, a.k.a, regional locality, is the key information required by RLM.")]),e._v(" "),t("p",[e._v("In the LLVM IR, all memory objects are accessed through load and store instructions.")]),e._v(" "),t("p",[e._v("Therefore we can evaluate the regional locality of a data object by estimating the execution frequency of all related load and store instructions in a certain target region.")]),e._v(" "),t("p",[e._v("The existing LLVM pass "),t("strong",[e._v("BlockFrequencyInfo")]),e._v(" can help achieve this purpose. "),t("em",[e._v("It statically analyzes the execution frequency of every basic block based on the branch taken probability.")])]),e._v(" "),t("p",[t("em",[e._v("We enhance this pass to improve its accuracy by leveraging GPU specific information, for instance, each loop iteration is executed by exactly one GPU thread.")])]),e._v(" "),t("p",[e._v("The execution frequency of a load/store instruction is equal to that of its parent basic block.")]),e._v(" "),t("p",[e._v("Through pointer chasing that starts from the argument of a target region, all memory access instructions related to an object can be found.")]),e._v(" "),t("p",[e._v("By accumulating the execution frequency of these instructions, the regional locality of a data object is calculated.")]),e._v(" "),t("hr"),e._v(" "),t("h2",{attrs:{id:"_2-nuba-non-uniform-bandwidth-gpus"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-nuba-non-uniform-bandwidth-gpus"}},[e._v("#")]),e._v(" 2. NUBA: Non-Uniform Bandwidth GPUs")]),e._v(" "),t("h3",{attrs:{id:"compiler-analysis-and-runtime-support"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#compiler-analysis-and-runtime-support"}},[e._v("#")]),e._v(" Compiler Analysis and Runtime Support")]),e._v(" "),t("p",[e._v("In prior work, the compiler employs data flow analysis at the PTX intermediate code level to identify accesses to read-only data structures within a kernel boundary.")]),e._v(" "),t("p",[e._v("If a data structure is never written to within a kernel, it is marked as read-only; otherwise, it is marked as read-write.")]),e._v(" "),t("p",[e._v("Note that a data structure marked as read-only in one GPU kernel can be read-write in another kernel, e.g., the output of one kernel can serve as input to another kernel.")]),e._v(" "),t("p",[e._v("Load operations accessing read-only data structures using the "),t("strong",[e._v("ld.global instruction")]),e._v(" are then replaced by a newly introduced "),t("strong",[e._v("ld.global.ro")]),e._v(" instruction, indicating to hardware that these instructions operate on read-only data that can be replicated.")]),e._v(" "),t("p",[e._v("To differentiate requests to read-only and read-write shared data at runtime, the instruction decoder in hardware, upon decoding an ld.global.ro instruction adds a read-only bit to the memory request metadata which MDR uses to "),t("strong",[e._v("identify candidates for replication")]),e._v(".")])])}),[],!1,null,null,null);t.default=i.exports}}]);